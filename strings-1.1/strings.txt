-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Functions for working with strings, including Text, ByteString, etc.
--   
--   This package provides various functions for working with strings, such
--   as <tt>join</tt>, <tt>split</tt>, <tt>toUppercase</tt>, etc.
--   
--   The functions in this package work with all kinds of strings such as
--   Text, ByteString, String, and their respective lazy counter parts.
--   There is also an interface which is agnostic of the underlying string
--   type.
--   
--   <ul>
--   <li><i><tt>v1.0.2</tt></i> Fixed an issue with <tt>strSplitAll</tt>.
--   Applied to the empty string it should return an empty list, but it
--   returned a list containing a single empty string. It now returns
--   correctly the empty list.</li>
--   <li><i><tt>v1.1</tt></i> Added <tt>strToUpper</tt>,
--   <tt>strToLower</tt>, <tt>strCapitalize</tt>, <tt>strCons</tt>, and
--   <tt>strMap</tt>. Also <tt>sCapitalize</tt>, <tt>sCons</tt>, and
--   <tt>sMap</tt>.</li>
--   </ul>
@package strings
@version 1.1


-- | Functions for working with strings, including <a>Text</a>,
--   <a>ByteString</a>, etc.
--   
--   This module aims at offering a consistent interface across all the
--   available string types. It currently offers instances for the ordinary
--   Haskell <a>String</a> type, <a>Text</a>, lazy <a>Text</a>,
--   <a>ByteString</a>, and lazy <a>ByteString</a>.
--   
--   It especially provides functions for some types, which are otherwise
--   not available nativly (such as <tt>breakOnSubstring</tt> which is not
--   available for the lazy <a>Text</a> type, is offered by <a>sBreak</a>
--   and <a>strBreak</a>).
module Data.Strings

-- | Create a <a>Text</a> object form an ordinary Haskell <a>String</a>.
text :: String -> Text

-- | Create a lazy <a>Text</a> object from an ordinary Haskell
--   <a>String</a>.
lazyText :: String -> Text

-- | Create a <a>ByteString</a> object form an ordinary Haskell
--   <a>String</a>. This function will encode a String using the UTF-8
--   character encoding.
bytes :: String -> ByteString

-- | Create a lazy <a>ByteString</a> object from an ordinary Haskell
--   <a>String</a>. This function will encode a String using the UTF-8
--   character encoding.
lazyBytes :: String -> ByteString

-- | Convert a <a>Char</a> into a <a>Word8</a>.
charToByte :: Char -> Word8

-- | Convert a <a>Word8</a> into a <a>Char</a>.
byteToChar :: Word8 -> Char

-- | The <a>Str</a> class provides functions for working with arbitrary
--   Strings. It is basically the same interface as provided by the
--   <a>Strings</a> class. However, every input string is a Haskell String
--   here, thus easing the usage of different string types with native
--   Haskell String literals.
--   
--   For example <tt>strAppend "suffix"</tt> works with any string type for
--   which an instance of <tt>Str</tt> is defined. In order to maximize the
--   ease of use of this library, the functions are prefixed with
--   <tt>str</tt>.
--   
--   The complexity and efficiency of these functions depends on the
--   underlying string type being used.
--   
--   Minimal complete definition: It suffices to provide instances for
--   <a>Eq</a> and <a>Strings</a>.
class (Eq a, Strings a) => Str a

-- | Check whether the given string is empty or not. <a>null</a>
--   generalised.
strNull :: Str a => a -> Bool

-- | <a>length</a> generalised.
strLen :: Str a => a -> Int

-- | <a>head</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
strHead :: Str a => a -> Char

-- | <a>last</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
strLast :: Str a => a -> Char

-- | <a>init</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
strInit :: Str a => a -> a

-- | <a>tail</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
strTail :: Str a => a -> a

-- | <a>take</a> generalised.
strTake :: Str a => Int -> a -> a

-- | <a>drop</a> generalised.
strDrop :: Str a => Int -> a -> a

-- | Replace a substring with another string.
strReplace :: Str a => String -> String -> a -> a

-- | Breaks the string on the first occurence of the given substring.
--   
--   <pre>
--   strBreak "xx" "1x2xx3xx4" = ("1x2", "xx3xx4")
--   </pre>
strBreak :: Str a => String -> a -> (a, a)

-- | Like <a>strBreak</a>, but the string to break on is excluded from the
--   result.
--   
--   <pre>
--   strSplit "xx" "1x2xx3xx4" = ("1x2", "3xx4")
--   </pre>
strSplit :: Str a => String -> a -> (a, a)

-- | Split a string into multiple fragments, separated by the given
--   substring.
--   
--   <pre>
--   strSplitAll "xx" "1x2xx3xx4" = ["1x2", "3", "4"]
--   </pre>
strSplitAll :: Str a => String -> a -> [a]

-- | Turn all characters in the string to upper case.
strToUpper :: Str a => a -> a

-- | Turn all characters in the string to lower case.
strToLower :: Str a => a -> a

-- | Turn the first character in the string to upper case.
strCapitalize :: Str a => a -> a

-- | <tt>map</tt> generalised.
strMap :: Str a => (Char -> Char) -> a -> a

-- | <tt>concat</tt> generalised.
strConcat :: Str a => [a] -> a

-- | Glue together multiple strings by a given Haskell <a>String</a>.
--   
--   <pre>
--   strJoin x = concat . intersperse x
--   </pre>
strJoin :: Str a => String -> [a] -> a

-- | Appends the given Haskell <a>String</a> to the string. <tt>++</tt>
--   generalised.
--   
--   <pre>
--   strAppend " world" "hello" = "hello world"
--   </pre>
strAppend :: Str a => String -> a -> a

-- | Cons generalised.
strCons :: Str a => Char -> a -> a

-- | Strips white space characters off both ends of the string.
strTrim :: Str a => a -> a

-- | Appends the given character n times to the left, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadLeft '0' 8 "4711" == "00004711"
--   </pre>
strPadLeft :: Str a => Char -> Int -> a -> a

-- | Appends the given character n times to the right, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadRight '0' 8 "4711" == "47110000"
--   </pre>
strPadRight :: Str a => Char -> Int -> a -> a

-- | Appends the given character n times to both sides, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadBoth '0' 8 "4711" == "00471100"
--   </pre>
strPadBoth :: Str a => Char -> Int -> a -> a

-- | Reverse the string.
strReverse :: Str a => a -> a

-- | Check if the given Haskell String equals the string.
strEq :: Str a => String -> a -> Bool

-- | Check if the string starts with the given Haskell String.
strStartsWith :: Str a => a -> String -> Bool

-- | Check if the string ends with the given Haskell String.
strEndsWith :: Str a => a -> String -> Bool

-- | Create a string from a Haskell String.
fromString :: Str a => String -> a

-- | Create a string from a Haskell String. If the string does not support
--   unicode, the Haskell String is encoded using UTF-8.
fromUnicodeString :: Str a => String -> a

-- | Convert the string into a Haskell String.
toString :: Str a => a -> String

-- | Convert the string into a list of bytes.
toWord8 :: Str a => a -> [Word8]

-- | The goal of this class is to offer the same interface for various
--   types of strings (<a>ByteString</a>, <a>Text</a>, Haskell
--   <a>String</a>, etc.). If a certain type offers a native implementation
--   for a given function, <a>Strings</a> uses it. If not, a default
--   implementation is given.
--   
--   All of these functions are prefixed with <tt>s</tt> to avoid
--   nameclashes with existing functions from the prelude.
--   
--   The complexity and efficiency of these functions depends on the
--   underlying string type being used.
class Strings a

-- | Check whether the given string is empty or not. <tt>null</tt>
--   generalised.
sNull :: Strings a => a -> Bool

-- | The empty string.
sEmpty :: Strings a => a

-- | <a>length</a> generalised.
sLen :: Strings a => a -> Int

-- | <a>head</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
sHead :: Strings a => a -> Char

-- | <a>last</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
sLast :: Strings a => a -> Char

-- | <a>init</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
sInit :: Strings a => a -> a

-- | <a>tail</a> generalised. This function is undefined if <a>strNull</a>
--   would return <tt>True</tt>.
sTail :: Strings a => a -> a

-- | <a>take</a> generalised.
sTake :: Strings a => Int -> a -> a

-- | <a>drop</a> generalised.
sDrop :: Strings a => Int -> a -> a

-- | <a>takeWhile</a> generalised.
sTakeWhile :: Strings a => (Char -> Bool) -> a -> a

-- | <a>dropWhile</a> generalised.
sDropWhile :: Strings a => (Char -> Bool) -> a -> a

-- | Replace a substring with another string.
sReplace :: Strings a => a -> a -> a -> a

-- | Breaks the string on the first occurence of the given substring.
--   
--   <pre>
--   strBreak "xx" "1x2xx3xx4" = ("1x2", "xx3xx4")
--   </pre>
sBreak :: Strings a => a -> a -> (a, a)

-- | Like <a>sBreak</a>, but the string to break on is excluded from the
--   result.
--   
--   <pre>
--   strSplit "xx" "1x2xx3xx4" = ("1x2", "3xx4")
--   </pre>
sSplit :: Strings a => a -> a -> (a, a, Bool)

-- | Split a string into multiple fragments, separated by the given
--   substring.
--   
--   <pre>
--   strSplitAll "xx" "1x2xx3xx4" = ["1x2", "3", "4"]
--   </pre>
sSplitAll :: Strings a => a -> a -> [a]

-- | Check if the string starts with the given string.
sStartsWith :: Strings a => a -> a -> Bool

-- | Check if the string ends with the given string.
sEndsWith :: Strings a => a -> a -> Bool

-- | Cons
sCons :: Strings a => Char -> a -> a

-- | Turn the first character into an upper case character.
sCapitalize :: Strings a => a -> a

-- | Map a function over all characters.
sMap :: Strings a => (Char -> Char) -> a -> a

-- | Concatenate all the strings in the list to a single string.
sConcat :: Strings a => [a] -> a

-- | Strips white space characters off both ends of the string.
sTrim :: Strings a => a -> a

-- | Appends the given character n times to the left, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadLeft '0' 8 "4711" == "00004711"
--   </pre>
sPadLeft :: Strings a => Char -> Int -> a -> a

-- | Appends the given character n times to the right, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadRight '0' 8 "4711" == "47110000"
--   </pre>
sPadRight :: Strings a => Char -> Int -> a -> a

-- | Appends the given character n times to both sides, such that the
--   resulting string has the given length.
--   
--   <pre>
--   strPadBoth '0' 8 "4711" == "00471100"
--   </pre>
sPadBoth :: Strings a => Char -> Int -> a -> a
sReverse :: Strings a => a -> a

-- | Create a string from a Haskell String.
sFromString :: Strings a => String -> a

-- | Create a string from a Haskell String. If the string does not support
--   unicode, the Haskell String is encoded using UTF-8.
sFromUnicodeString :: Strings a => String -> a

-- | Convert the string into a Haskell String.
sToString :: Strings a => a -> String

-- | Convert the string into a list of bytes.
sToWord8 :: Strings a => a -> [Word8]
instance Data.Strings.Strings Data.ByteString.Internal.ByteString
instance Data.Strings.Strings Data.ByteString.Lazy.Internal.ByteString
instance Data.Strings.Chars GHC.Types.Int
instance Data.Strings.Chars GHC.Word.Word8
instance Data.Strings.Chars GHC.Word.Word16
instance Data.Strings.Chars GHC.Word.Word32
instance Data.Strings.Chars GHC.Word.Word64
instance Data.Strings.Chars GHC.Int.Int8
instance Data.Strings.Chars GHC.Int.Int16
instance Data.Strings.Chars GHC.Int.Int32
instance Data.Strings.Chars GHC.Int.Int64
instance Data.Strings.Chars GHC.Integer.Type.Integer
instance Data.Strings.Str Data.Text.Internal.Text
instance Data.Strings.Str Data.Text.Internal.Lazy.Text
instance Data.Strings.Str Data.ByteString.Internal.ByteString
instance Data.Strings.Str Data.ByteString.Lazy.Internal.ByteString
instance Data.Strings.Str GHC.Base.String
instance Data.Strings.Strings Data.Text.Internal.Text
instance Data.Strings.Strings Data.Text.Internal.Lazy.Text
instance Data.Strings.Strings GHC.Base.String
