-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-cli
@version 0.0.0

module Compat

-- | Constructs a default interrupt handler which builds an interrupt
--   handler which throws a UserInterrupt exception to the thread in which
--   the setup was initially called.
defaultInterruptHandler :: IO (IO ())

-- | Replaces any existing interrupt handlers with the provided IO action
--   while the provided action is running, restoring any existing handlers
--   afterwards.
withInterruptHandler :: IO () -> IO a -> IO a

module Unison.Codebase.Editor.AuthorInfo
data AuthorInfo v a
AuthorInfo :: (Id, Term v a, Type v a) -> AuthorInfo v a
[guid, author, copyrightHolder] :: AuthorInfo v a -> (Id, Term v a, Type v a)
createAuthorInfo :: forall m v a. MonadIO m => Var v => a -> Text -> m (AuthorInfo v a)

module Unison.Codebase.Editor.Input
data Input
ForkLocalBranchI :: Either ShortBranchHash Path' -> Path' -> Input
MergeLocalBranchI :: Path' -> Path' -> MergeMode -> Input
PreviewMergeLocalBranchI :: Path' -> Path' -> Input
DiffNamespaceI :: BranchId -> BranchId -> Input
PullRemoteBranchI :: Maybe ReadRemoteNamespace -> Path' -> SyncMode -> PullMode -> Verbosity -> Input
PushRemoteBranchI :: Maybe WriteRemotePath -> Path' -> PushBehavior -> SyncMode -> Input
CreatePullRequestI :: ReadRemoteNamespace -> ReadRemoteNamespace -> Input
LoadPullRequestI :: ReadRemoteNamespace -> ReadRemoteNamespace -> Path' -> Input
ResetRootI :: Either ShortBranchHash Path' -> Input
CreateMessage :: Pretty ColorText -> Input
SwitchBranchI :: Maybe Path' -> Input
UpI :: Input
PopBranchI :: Input
NamesI :: IsGlobal -> HashQualified Name -> Input
AliasTermI :: HashOrHQSplit' -> Split' -> Input
AliasTypeI :: HashOrHQSplit' -> Split' -> Input
AliasManyI :: [HQSplit] -> Path' -> Input
MoveTermI :: HQSplit' -> Split' -> Input
MoveTypeI :: HQSplit' -> Split' -> Input
MoveBranchI :: Maybe Split' -> Split' -> Input
MovePatchI :: Split' -> Split' -> Input
CopyPatchI :: Split' -> Split' -> Input
DeleteI :: HQSplit' -> Input
DeleteTermI :: HQSplit' -> Input
DeleteTypeI :: HQSplit' -> Input
DeleteBranchI :: Insistence -> Maybe Split' -> Input
DeletePatchI :: Split' -> Input
ResolveTermNameI :: HQSplit' -> Input
ResolveTypeNameI :: HQSplit' -> Input
LoadI :: Maybe FilePath -> Input
AddI :: Set Name -> Input
PreviewAddI :: Set Name -> Input
UpdateI :: OptionalPatch -> Set Name -> Input
PreviewUpdateI :: Set Name -> Input
TodoI :: Maybe PatchPath -> Path' -> Input
PropagatePatchI :: PatchPath -> Path' -> Input
ListEditsI :: Maybe PatchPath -> Input
DeprecateTermI :: PatchPath -> HQSplit' -> Input
DeprecateTypeI :: PatchPath -> HQSplit' -> Input
ReplaceI :: HashQualified Name -> HashQualified Name -> Maybe PatchPath -> Input
RemoveTermReplacementI :: HashQualified Name -> Maybe PatchPath -> Input
RemoveTypeReplacementI :: HashQualified Name -> Maybe PatchPath -> Input
UndoI :: Input
HistoryI :: Maybe Int -> Maybe Int -> BranchId -> Input
ExecuteI :: String -> [String] -> Input
IOTestI :: HashQualified Name -> Input
MakeStandaloneI :: String -> HashQualified Name -> Input
TestI :: Bool -> Bool -> Input
LinkI :: HashQualified Name -> [HQSplit'] -> Input
UnlinkI :: HashQualified Name -> [HQSplit'] -> Input
LinksI :: HQSplit' -> Maybe String -> Input
CreateAuthorI :: NameSegment -> Text -> Input
DisplayI :: OutputLocation -> [HashQualified Name] -> Input
DocsI :: [HQSplit'] -> Input
FindI :: Bool -> IsGlobal -> [String] -> Input
FindShallowI :: Path' -> Input
FindPatchI :: Input
ShowDefinitionI :: OutputLocation -> [HashQualified Name] -> Input
ShowDefinitionByPrefixI :: OutputLocation -> [HashQualified Name] -> Input
ShowReflogI :: Input
UpdateBuiltinsI :: Input
MergeBuiltinsI :: Input
MergeIOBuiltinsI :: Input
ListDependenciesI :: HashQualified Name -> Input
ListDependentsI :: HashQualified Name -> Input

-- | List all external dependencies of a given namespace, or the current
--   namespace if no path is provided.
NamespaceDependenciesI :: Maybe Path' -> Input
DebugNumberedArgsI :: Input
DebugTypecheckedUnisonFileI :: Input
DebugDumpNamespacesI :: Input
DebugDumpNamespaceSimpleI :: Input
DebugClearWatchI :: Input
DebugDoctorI :: Input
QuitI :: Input
ApiI :: Input
UiI :: Input
DocsToHtmlI :: Path' -> FilePath -> Input
GistI :: GistInput -> Input
AuthLoginI :: Input
VersionI :: Input

-- | <tt>"gist repo"</tt> pushes the contents of the current namespace to
--   <tt>repo</tt>.
data GistInput
GistInput :: WriteRepo -> GistInput
[repo] :: GistInput -> WriteRepo
data Event
UnisonFileChanged :: SourceName -> Source -> Event
IncomingRootBranch :: Set CausalHash -> Event
data OutputLocation
ConsoleLocation :: OutputLocation
LatestFileLocation :: OutputLocation
FileLocation :: FilePath -> OutputLocation
type PatchPath = Split'
type BranchId = Either ShortBranchHash Path'
type AbsBranchId = Either ShortBranchHash Absolute
parseBranchId :: String -> Either String BranchId
type HashOrHQSplit' = Either ShortHash HQSplit'

-- | Should we force the operation or not?
data Insistence
Force :: Insistence
Try :: Insistence
data PullMode
PullWithHistory :: PullMode
PullWithoutHistory :: PullMode
data OptionalPatch
NoPatch :: OptionalPatch
DefaultPatch :: OptionalPatch
UsePatch :: PatchPath -> OptionalPatch
type IsGlobal = Bool
instance GHC.Show.Show Unison.Codebase.Editor.Input.OptionalPatch
instance GHC.Classes.Ord Unison.Codebase.Editor.Input.OptionalPatch
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.OptionalPatch
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.Insistence
instance GHC.Show.Show Unison.Codebase.Editor.Input.Insistence
instance GHC.Show.Show Unison.Codebase.Editor.Input.PullMode
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.PullMode
instance GHC.Show.Show Unison.Codebase.Editor.Input.GistInput
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.GistInput
instance GHC.Show.Show Unison.Codebase.Editor.Input.OutputLocation
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.OutputLocation
instance GHC.Show.Show Unison.Codebase.Editor.Input.Input
instance GHC.Classes.Eq Unison.Codebase.Editor.Input.Input

module Unison.Codebase.Editor.Output.BranchDiff
data MetadataDiff tm
MetadataDiff :: [tm] -> [tm] -> MetadataDiff tm
[addedMetadata] :: MetadataDiff tm -> [tm]
[removedMetadata] :: MetadataDiff tm -> [tm]
data BranchDiffOutput v a
BranchDiffOutput :: [UpdateTypeDisplay v a] -> [UpdateTermDisplay v a] -> [UpdateTypeDisplay v a] -> [UpdateTermDisplay v a] -> [UpdateTypeDisplay v a] -> [UpdateTermDisplay v a] -> Int -> [PatchDisplay] -> [AddedTypeDisplay v a] -> [AddedTermDisplay v a] -> [PatchDisplay] -> [RemovedTypeDisplay v a] -> [RemovedTermDisplay v a] -> [PatchDisplay] -> [RenameTypeDisplay v a] -> [RenameTermDisplay v a] -> BranchDiffOutput v a
[updatedTypes] :: BranchDiffOutput v a -> [UpdateTypeDisplay v a]
[updatedTerms] :: BranchDiffOutput v a -> [UpdateTermDisplay v a]
[newTypeConflicts] :: BranchDiffOutput v a -> [UpdateTypeDisplay v a]
[newTermConflicts] :: BranchDiffOutput v a -> [UpdateTermDisplay v a]
[resolvedTypeConflicts] :: BranchDiffOutput v a -> [UpdateTypeDisplay v a]
[resolvedTermConflicts] :: BranchDiffOutput v a -> [UpdateTermDisplay v a]
[propagatedUpdates] :: BranchDiffOutput v a -> Int
[updatedPatches] :: BranchDiffOutput v a -> [PatchDisplay]
[addedTypes] :: BranchDiffOutput v a -> [AddedTypeDisplay v a]
[addedTerms] :: BranchDiffOutput v a -> [AddedTermDisplay v a]
[addedPatches] :: BranchDiffOutput v a -> [PatchDisplay]
[removedTypes] :: BranchDiffOutput v a -> [RemovedTypeDisplay v a]
[removedTerms] :: BranchDiffOutput v a -> [RemovedTermDisplay v a]
[removedPatches] :: BranchDiffOutput v a -> [PatchDisplay]
[renamedTypes] :: BranchDiffOutput v a -> [RenameTypeDisplay v a]
[renamedTerms] :: BranchDiffOutput v a -> [RenameTermDisplay v a]
isEmpty :: BranchDiffOutput v a -> Bool
type TermDisplay v a = (HashQualified Name, Referent, Maybe (Type v a), MetadataDiff (MetadataDisplay v a))
type TypeDisplay v a = (HashQualified Name, Reference, Maybe (DeclOrBuiltin v a), MetadataDiff (MetadataDisplay v a))
type AddedTermDisplay v a = ([(HashQualified Name, [MetadataDisplay v a])], Referent, Maybe (Type v a))
type AddedTypeDisplay v a = ([(HashQualified Name, [MetadataDisplay v a])], Reference, Maybe (DeclOrBuiltin v a))
type RemovedTermDisplay v a = ([HashQualified Name], Referent, Maybe (Type v a))
type RemovedTypeDisplay v a = ([HashQualified Name], Reference, Maybe (DeclOrBuiltin v a))
type SimpleTermDisplay v a = (HashQualified Name, Referent, Maybe (Type v a))
type SimpleTypeDisplay v a = (HashQualified Name, Reference, Maybe (DeclOrBuiltin v a))
type UpdateTermDisplay v a = (Maybe [SimpleTermDisplay v a], [TermDisplay v a])
type UpdateTypeDisplay v a = (Maybe [SimpleTypeDisplay v a], [TypeDisplay v a])
type MetadataDisplay v a = (HashQualified Name, Referent, Maybe (Type v a))
type RenameTermDisplay v a = (Referent, Maybe (Type v a), Set (HashQualified Name), Set (HashQualified Name))
type RenameTypeDisplay v a = (Reference, Maybe (DeclOrBuiltin v a), Set (HashQualified Name), Set (HashQualified Name))
type PatchDisplay = (Name, PatchDiff)
toOutput :: forall m v a. Monad m => (Referent -> m (Maybe (Type v a))) -> (Reference -> m (Maybe (DeclOrBuiltin v a))) -> Int -> Names -> Names -> PrettyPrintEnv -> BranchDiff -> m (BranchDiffOutput v a)
instance GHC.Show.Show tm => GHC.Show.Show (Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff tm)
instance Data.Traversable.Traversable Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff
instance Data.Foldable.Foldable Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff
instance GHC.Base.Functor Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff
instance GHC.Classes.Eq tm => GHC.Classes.Eq (Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff tm)
instance GHC.Classes.Ord tm => GHC.Classes.Ord (Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff tm)
instance (GHC.Show.Show a, GHC.Show.Show v) => GHC.Show.Show (Unison.Codebase.Editor.Output.BranchDiff.BranchDiffOutput v a)
instance GHC.Base.Semigroup (Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff tm)
instance GHC.Base.Monoid (Unison.Codebase.Editor.Output.BranchDiff.MetadataDiff tm)

module Unison.Codebase.Editor.Output.DumpNamespace
data DumpNamespace
DumpNamespace :: Map Referent (Set NameSegment, Set Reference) -> Map Reference (Set NameSegment, Set Reference) -> Map NameSegment EditHash -> Map NameSegment CausalHash -> Set CausalHash -> DumpNamespace
[terms] :: DumpNamespace -> Map Referent (Set NameSegment, Set Reference)
[types] :: DumpNamespace -> Map Reference (Set NameSegment, Set Reference)
[patches] :: DumpNamespace -> Map NameSegment EditHash
[children] :: DumpNamespace -> Map NameSegment CausalHash
[causalParents] :: DumpNamespace -> Set CausalHash
instance GHC.Show.Show Unison.Codebase.Editor.Output.DumpNamespace.DumpNamespace

module Unison.Codebase.Editor.SlurpComponent
data SlurpComponent v
SlurpComponent :: Set v -> Set v -> Set v -> SlurpComponent v
[types] :: SlurpComponent v -> Set v
[terms] :: SlurpComponent v -> Set v
[ctors] :: SlurpComponent v -> Set v
isEmpty :: SlurpComponent v -> Bool
empty :: Ord v => SlurpComponent v
difference :: Ord v => SlurpComponent v -> SlurpComponent v -> SlurpComponent v
intersection :: Ord v => SlurpComponent v -> SlurpComponent v -> SlurpComponent v
closeWithDependencies :: forall v a. Ord v => TypecheckedUnisonFile v a -> SlurpComponent v -> SlurpComponent v
fromTypes :: Ord v => Set v -> SlurpComponent v
fromTerms :: Ord v => Set v -> SlurpComponent v
fromCtors :: Ord v => Set v -> SlurpComponent v
instance GHC.Show.Show v => GHC.Show.Show (Unison.Codebase.Editor.SlurpComponent.SlurpComponent v)
instance GHC.Classes.Ord v => GHC.Classes.Ord (Unison.Codebase.Editor.SlurpComponent.SlurpComponent v)
instance GHC.Classes.Eq v => GHC.Classes.Eq (Unison.Codebase.Editor.SlurpComponent.SlurpComponent v)
instance GHC.Classes.Ord v => GHC.Base.Semigroup (Unison.Codebase.Editor.SlurpComponent.SlurpComponent v)
instance GHC.Classes.Ord v => GHC.Base.Monoid (Unison.Codebase.Editor.SlurpComponent.SlurpComponent v)

module Unison.Codebase.Editor.SlurpResult
data Aliases
AddAliases :: Set Name -> Aliases
UpdateAliases :: Set Name -> Set Name -> Aliases
[oldRefNames] :: Aliases -> Set Name
[newRefNames] :: Aliases -> Set Name
data SlurpResult v
SlurpResult :: TypecheckedUnisonFile v Ann -> SlurpComponent v -> SlurpComponent v -> SlurpComponent v -> SlurpComponent v -> SlurpComponent v -> SlurpComponent v -> Set v -> Set v -> Map v Aliases -> Map v Aliases -> SlurpComponent v -> SlurpResult v
[originalFile] :: SlurpResult v -> TypecheckedUnisonFile v Ann
[extraDefinitions] :: SlurpResult v -> SlurpComponent v
[adds] :: SlurpResult v -> SlurpComponent v
[duplicates] :: SlurpResult v -> SlurpComponent v
[collisions] :: SlurpResult v -> SlurpComponent v
[conflicts] :: SlurpResult v -> SlurpComponent v
[updates] :: SlurpResult v -> SlurpComponent v
[termExistingConstructorCollisions] :: SlurpResult v -> Set v
[constructorExistingTermCollisions] :: SlurpResult v -> Set v
[termAlias] :: SlurpResult v -> Map v Aliases
[typeAlias] :: SlurpResult v -> Map v Aliases
[defsWithBlockedDependencies] :: SlurpResult v -> SlurpComponent v
hasAddsOrUpdates :: Ord v => SlurpResult v -> Bool
data Status
Add :: Status
Update :: Status
Duplicate :: Status
Collision :: Status
Conflicted :: Status
TermExistingConstructorCollision :: Status
ConstructorExistingTermCollision :: Status
ExtraDefinition :: Status
BlockedDependency :: Status
isFailure :: Status -> Bool
prettyStatus :: Status -> Pretty ColorText
type IsPastTense = Bool
prettyVar :: Var v => v -> Pretty ColorText
aliasesToShow :: Int
pretty :: forall v. Var v => IsPastTense -> PrettyPrintEnv -> SlurpResult v -> Pretty ColorText
isOk :: Ord v => SlurpResult v -> Bool
isAllDuplicates :: Ord v => SlurpResult v -> Bool
ex :: Pretty ColorText
instance GHC.Classes.Ord Unison.Codebase.Editor.SlurpResult.Aliases
instance GHC.Classes.Eq Unison.Codebase.Editor.SlurpResult.Aliases
instance GHC.Show.Show Unison.Codebase.Editor.SlurpResult.Aliases
instance GHC.Show.Show v => GHC.Show.Show (Unison.Codebase.Editor.SlurpResult.SlurpResult v)
instance GHC.Show.Show Unison.Codebase.Editor.SlurpResult.Status
instance GHC.Classes.Eq Unison.Codebase.Editor.SlurpResult.Status
instance GHC.Classes.Ord Unison.Codebase.Editor.SlurpResult.Status

module Unison.Codebase.Editor.Slurp

-- | The operation which is being performed or checked.
data SlurpOp
AddOp :: SlurpOp
UpdateOp :: SlurpOp
CheckOp :: SlurpOp

-- | Analyze a file and determine the status of all of its definitions with
--   respect to a set of vars to analyze and an operation you wish to
--   perform.
slurpFile :: forall v. Var v => TypecheckedUnisonFile v Ann -> Set v -> SlurpOp -> Names -> SlurpResult v
instance GHC.Show.Show Unison.Codebase.Editor.Slurp.SlurpOp
instance GHC.Classes.Eq Unison.Codebase.Editor.Slurp.SlurpOp
instance GHC.Show.Show v => GHC.Show.Show (Unison.Codebase.Editor.Slurp.TaggedVar v)
instance GHC.Classes.Ord v => GHC.Classes.Ord (Unison.Codebase.Editor.Slurp.TaggedVar v)
instance GHC.Classes.Eq v => GHC.Classes.Eq (Unison.Codebase.Editor.Slurp.TaggedVar v)
instance GHC.Show.Show Unison.Codebase.Editor.Slurp.SlurpOk
instance GHC.Classes.Ord Unison.Codebase.Editor.Slurp.SlurpOk
instance GHC.Classes.Eq Unison.Codebase.Editor.Slurp.SlurpOk
instance GHC.Show.Show Unison.Codebase.Editor.Slurp.SlurpErr
instance GHC.Classes.Ord Unison.Codebase.Editor.Slurp.SlurpErr
instance GHC.Classes.Eq Unison.Codebase.Editor.Slurp.SlurpErr
instance GHC.Show.Show Unison.Codebase.Editor.Slurp.DefnStatus
instance GHC.Classes.Ord Unison.Codebase.Editor.Slurp.DefnStatus
instance GHC.Classes.Eq Unison.Codebase.Editor.Slurp.DefnStatus
instance GHC.Show.Show v => GHC.Show.Show (Unison.Codebase.Editor.Slurp.SummarizedStatus v)
instance GHC.Classes.Ord v => GHC.Classes.Ord (Unison.Codebase.Editor.Slurp.SummarizedStatus v)
instance GHC.Classes.Eq v => GHC.Classes.Eq (Unison.Codebase.Editor.Slurp.SummarizedStatus v)
instance GHC.Classes.Ord v => GHC.Base.Semigroup (Unison.Codebase.Editor.Slurp.SlurpingSummary v)
instance GHC.Classes.Ord v => GHC.Base.Monoid (Unison.Codebase.Editor.Slurp.SlurpingSummary v)

module Unison.Codebase.Editor.TodoOutput
type Score = Int
data TodoOutput v a
TodoOutput :: Score -> ([(Reference, Maybe (Type v a))], [(Reference, DisplayObject () (Decl v a))]) -> ([(Score, Reference, Maybe (Type v a))], [(Score, Reference, DisplayObject () (Decl v a))]) -> Names -> Patch -> TodoOutput v a
[todoScore] :: TodoOutput v a -> Score
[todoFrontier] :: TodoOutput v a -> ([(Reference, Maybe (Type v a))], [(Reference, DisplayObject () (Decl v a))])
[todoFrontierDependents] :: TodoOutput v a -> ([(Score, Reference, Maybe (Type v a))], [(Score, Reference, DisplayObject () (Decl v a))])
[nameConflicts] :: TodoOutput v a -> Names
[editConflicts] :: TodoOutput v a -> Patch
labeledDependencies :: Ord v => TodoOutput v a -> Set LabeledDependency
noConflicts :: TodoOutput v a -> Bool
noEdits :: TodoOutput v a -> Bool
instance (GHC.Show.Show v, GHC.Show.Show a) => GHC.Show.Show (Unison.Codebase.Editor.TodoOutput.TodoOutput v a)

module Unison.Codebase.Editor.UriParser
repoPath :: P ReadRemoteNamespace
writeRepo :: P WriteRepo
writeRepoPath :: P WriteRemotePath
instance GHC.Show.Show Unison.Codebase.Editor.UriParser.Scheme
instance GHC.Classes.Ord Unison.Codebase.Editor.UriParser.Scheme
instance GHC.Classes.Eq Unison.Codebase.Editor.UriParser.Scheme
instance GHC.Show.Show Unison.Codebase.Editor.UriParser.User
instance GHC.Classes.Ord Unison.Codebase.Editor.UriParser.User
instance GHC.Classes.Eq Unison.Codebase.Editor.UriParser.User
instance GHC.Show.Show Unison.Codebase.Editor.UriParser.HostInfo
instance GHC.Classes.Ord Unison.Codebase.Editor.UriParser.HostInfo
instance GHC.Classes.Eq Unison.Codebase.Editor.UriParser.HostInfo
instance GHC.Show.Show Unison.Codebase.Editor.UriParser.GitProtocol
instance GHC.Classes.Ord Unison.Codebase.Editor.UriParser.GitProtocol
instance GHC.Classes.Eq Unison.Codebase.Editor.UriParser.GitProtocol

module Unison.Codebase.Editor.VersionParser

-- | Parse git version strings into valid unison namespaces. "release/M1j"
--   -&gt; "releases._M1j" "release/M1j.2" -&gt; "releases._M1j_2"
--   "latest-*" -&gt; "trunk"
defaultBaseLib :: Parsec Void Text ReadRemoteNamespace


-- | Command-line fuzzy selection of arbitrary values. Shells out to fzf
--   for the actual selection.
module Unison.CommandLine.FuzzySelect

-- | Allows prompting the user to interactively fuzzy-select a result from
--   a list of options, currently shells out to <tt>fzf</tt> under the
--   hood. If fzf is missing, or an error (other than ctrl-c) occurred,
--   returns Nothing.
fuzzySelect :: forall a. Options -> (a -> Text) -> [a] -> IO (Maybe [a])

-- | Fuzzy Selection options
data Options
Options :: Bool -> Options
[allowMultiSelect] :: Options -> Bool

-- | Default <a>Options</a>
defaultOptions :: Options


-- | Provides Globbing for selecting types, terms and namespaces using
--   wildcards.
module Unison.CommandLine.Globbing

-- | Expand a single glob pattern into all matching targets of the
--   specified types.
expandGlobs :: forall m. Set TargetType -> Branch0 m -> Absolute -> String -> Maybe [String]

-- | Possible targets which a glob may select.
data TargetType
Type :: TargetType
Term :: TargetType
Namespace :: TargetType
instance GHC.Show.Show Unison.CommandLine.Globbing.TargetType
instance GHC.Classes.Ord Unison.CommandLine.Globbing.TargetType
instance GHC.Classes.Eq Unison.CommandLine.Globbing.TargetType
instance GHC.Show.Show Unison.CommandLine.Globbing.GlobArg

module Unison.CommandLine.InputPattern
data IsOptional
Required :: IsOptional
Optional :: IsOptional
ZeroPlus :: IsOptional
OnePlus :: IsOptional
data Visibility
Hidden :: Visibility
Visible :: Visibility
data InputPattern
InputPattern :: String -> [String] -> Visibility -> [(IsOptional, ArgumentType)] -> Pretty ColorText -> ([String] -> Either (Pretty ColorText) Input) -> InputPattern
[patternName] :: InputPattern -> String
[aliases] :: InputPattern -> [String]
[visibility] :: InputPattern -> Visibility
[argTypes] :: InputPattern -> [(IsOptional, ArgumentType)]
[help] :: InputPattern -> Pretty ColorText
[parse] :: InputPattern -> [String] -> Either (Pretty ColorText) Input
data ArgumentType
ArgumentType :: String -> (forall m v a. Monad m => String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]) -> Set TargetType -> ArgumentType
[typeName] :: ArgumentType -> String

-- | Generate completion suggestions for this argument type
[suggestions] :: ArgumentType -> forall m v a. Monad m => String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]

-- | Select which targets glob patterns may expand into for this argument.
--   An empty set disables globbing.
[globTargets] :: ArgumentType -> Set TargetType
argType :: InputPattern -> Int -> Maybe ArgumentType
minArgs :: InputPattern -> Int
maxArgs :: InputPattern -> Maybe Int
noSuggestions :: Monad m => String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]
instance GHC.Classes.Eq Unison.CommandLine.InputPattern.IsOptional
instance GHC.Show.Show Unison.CommandLine.InputPattern.IsOptional
instance GHC.Classes.Ord Unison.CommandLine.InputPattern.Visibility
instance GHC.Classes.Eq Unison.CommandLine.InputPattern.Visibility
instance GHC.Show.Show Unison.CommandLine.InputPattern.Visibility
instance GHC.Show.Show Unison.CommandLine.InputPattern.ArgumentType

module Unison.CommandLine
allow :: FilePath -> Bool
backtick :: IsString s => Pretty s -> Pretty s
aside :: (ListLike s Char, IsString s) => Pretty s -> Pretty s -> Pretty s
bigproblem :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
note :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
nothingTodo :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
plural :: Foldable f => f a -> b -> b -> b
plural' :: Integral a => a -> b -> b -> b
problem :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
tip :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
warn :: (ListLike s Char, IsString s) => Pretty s -> Pretty s
warnNote :: String -> String
completion :: String -> Completion
completion' :: String -> Completion

-- | Constructs a list of <tt>Completion</tt>s from a query and completion
--   options by filtering them for prefix matches. A completion will be
--   selected if it's an exact match for a provided option.
exactComplete :: String -> [String] -> [Completion]
fuzzyComplete :: String -> [String] -> [Completion]
fuzzyCompleteHashQualified :: Names -> String -> [Completion]
prefixIncomplete :: String -> [String] -> [Completion]
prettyCompletion :: Bool -> (String, Pretty ColorText) -> Completion
fixupCompletion :: String -> [Completion] -> [Completion]

-- | Completes a list of options, limiting options to the same namespace as
--   the query, or the namespace's children if the query is itself a
--   namespace.
--   
--   E.g. query: "base" would match: ["base", "base.List", "base2"]
--   wouldn't match: ["base.List.map", "contrib", "base2.List"]
completeWithinQueryNamespace :: String -> [String] -> [Completion]
parseInput :: Branch0 m -> Absolute -> [String] -> Map String InputPattern -> [String] -> Either (Pretty ColorText) Input
prompt :: String
watchBranchUpdates :: IO (Branch IO) -> TQueue Event -> Codebase IO v a -> IO (IO ())
watchConfig :: FilePath -> IO (Config, IO ())
watchFileSystem :: TQueue Event -> FilePath -> IO (IO ())

module Unison.CommandLine.InputPatterns
showPatternHelp :: InputPattern -> Pretty ColorText
patternName :: InputPattern -> Pretty ColorText
makeExample :: InputPattern -> [Pretty ColorText] -> Pretty ColorText
makeExampleNoBackticks :: InputPattern -> [Pretty ColorText] -> Pretty ColorText
makeExample' :: InputPattern -> Pretty ColorText
makeExampleEOS :: InputPattern -> [Pretty ColorText] -> Pretty ColorText
helpFor :: InputPattern -> Either (Pretty ColorText) Input
mergeBuiltins :: InputPattern
mergeIOBuiltins :: InputPattern
updateBuiltins :: InputPattern
todo :: InputPattern
load :: InputPattern
add :: InputPattern
previewAdd :: InputPattern
updateNoPatch :: InputPattern
update :: InputPattern
previewUpdate :: InputPattern
patch :: InputPattern
view :: InputPattern
display :: InputPattern
displayTo :: InputPattern
docs :: InputPattern
api :: InputPattern
ui :: InputPattern
undo :: InputPattern
viewByPrefix :: InputPattern
find :: InputPattern
findGlobal :: InputPattern
find' :: String -> Bool -> InputPattern
findShallow :: InputPattern
findVerbose :: InputPattern
findPatch :: InputPattern
renameTerm :: InputPattern
renameType :: InputPattern
delete :: InputPattern
deleteTerm :: InputPattern
deleteType :: InputPattern
deleteTermReplacementCommand :: String
deleteTypeReplacementCommand :: String
deleteReplacement :: Bool -> InputPattern
deleteTermReplacement :: InputPattern
deleteTypeReplacement :: InputPattern
parseHashQualifiedName :: String -> Either (Pretty ColorText) (HashQualified Name)
aliasTerm :: InputPattern
aliasType :: InputPattern
aliasMany :: InputPattern
up :: InputPattern
cd :: InputPattern
back :: InputPattern
deleteNamespace :: InputPattern
deleteNamespaceForce :: InputPattern
deleteNamespaceParser :: Pretty ColorText -> Insistence -> [String] -> Either (Pretty ColorText) Input
deletePatch :: InputPattern
movePatch :: String -> String -> Either (Pretty ColorText) Input
copyPatch' :: String -> String -> Either (Pretty ColorText) Input
copyPatch :: InputPattern
renamePatch :: InputPattern
renameBranch :: InputPattern
history :: InputPattern
forkLocal :: InputPattern
resetRoot :: InputPattern
pullSilent :: InputPattern
pull :: InputPattern
pullWithoutHistory :: InputPattern
pullImpl :: String -> Verbosity -> PullMode -> Pretty ColorText -> InputPattern
pullExhaustive :: InputPattern
push :: InputPattern
pushCreate :: InputPattern
pushExhaustive :: InputPattern
createPullRequest :: InputPattern
loadPullRequest :: InputPattern
parseUri :: String -> String -> Either (Pretty ColorText) ReadRemoteNamespace
prettyPrintParseError :: String -> ParseError Char Void -> Pretty ColorText
parseWriteRepo :: String -> String -> Either (Pretty ColorText) WriteRepo
parsePushPath :: String -> String -> Either (Pretty ColorText) WriteRemotePath
squashMerge :: InputPattern
mergeLocal :: InputPattern
diffNamespace :: InputPattern
previewMergeLocal :: InputPattern
replaceEdit :: (HashQualified Name -> HashQualified Name -> Maybe PatchPath -> Input) -> InputPattern
replace :: InputPattern
viewReflog :: InputPattern
edit :: InputPattern
topicNameArg :: ArgumentType
codebaseServerNameArg :: ArgumentType
helpTopics :: InputPattern
helpTopicsMap :: Map String (Pretty ColorText)
help :: InputPattern
quit :: InputPattern
viewPatch :: InputPattern
link :: InputPattern
links :: InputPattern
unlink :: InputPattern
names :: IsGlobal -> InputPattern
dependents :: InputPattern
dependencies :: InputPattern
namespaceDependencies :: InputPattern
debugNumberedArgs :: InputPattern
debugFileHashes :: InputPattern
debugDumpNamespace :: InputPattern
debugDumpNamespaceSimple :: InputPattern
debugClearWatchCache :: InputPattern
debugDoctor :: InputPattern
test :: InputPattern
docsToHtml :: InputPattern
execute :: InputPattern
ioTest :: InputPattern
makeStandalone :: InputPattern
createAuthor :: InputPattern
gist :: InputPattern
authLogin :: InputPattern
printVersion :: InputPattern
validInputs :: [InputPattern]
visibleInputs :: [InputPattern]
commandNames :: [String]
commandNameArg :: ArgumentType
exactDefinitionOrPathArg :: ArgumentType
fuzzyDefinitionQueryArg :: ArgumentType
definitionQueryArg :: ArgumentType
exactDefinitionTypeQueryArg :: ArgumentType
exactDefinitionTermQueryArg :: ArgumentType
typeCompletor :: Applicative m => (String -> [String] -> [Completion]) -> String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]
termCompletor :: Applicative m => (String -> [String] -> [Completion]) -> String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]
patchArg :: ArgumentType
allCompletors :: Monad m => [String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]] -> String -> Codebase m v a -> Branch m -> Absolute -> m [Completion]
bothCompletors :: Monad m => (String -> t2 -> t3 -> t4 -> m [Completion]) -> (String -> t2 -> t3 -> t4 -> m [Completion]) -> String -> t2 -> t3 -> t4 -> m [Completion]

-- | A completer for namespace paths.
pathCompletor :: Applicative f => (String -> [String] -> [Completion]) -> (Branch0 m -> Set Text) -> String -> codebase -> Branch m -> Absolute -> f [Completion]
namespaceArg :: ArgumentType

-- | Recursively collects all names of namespaces which are children of the
--   branch.
allSubNamespaces :: Branch0 m -> [Text]
newNameArg :: ArgumentType
noCompletions :: ArgumentType
gitUrlArg :: ArgumentType
collectNothings :: (a -> Maybe b) -> [a] -> [a]
explainRemote :: Pretty ColorText

module Unison.CommandLine.Welcome
data Welcome
Welcome :: Onboarding -> DownloadBase -> FilePath -> Text -> Welcome
[onboarding] :: Welcome -> Onboarding
[downloadBase] :: Welcome -> DownloadBase
[watchDir] :: Welcome -> FilePath
[unisonVersion] :: Welcome -> Text
data DownloadBase
DownloadBase :: ReadRemoteNamespace -> DownloadBase
DontDownloadBase :: DownloadBase
data CodebaseInitStatus
NewlyCreatedCodebase :: CodebaseInitStatus
PreviouslyCreatedCodebase :: CodebaseInitStatus
data Onboarding
Init :: CodebaseInitStatus -> Onboarding
DownloadingBase :: ReadRemoteNamespace -> Onboarding
Author :: Onboarding
Finished :: Onboarding
PreviouslyOnboarded :: Onboarding
welcome :: CodebaseInitStatus -> DownloadBase -> FilePath -> Text -> Welcome
pullBase :: ReadRemoteNamespace -> Either Event Input
run :: Codebase IO v a -> Welcome -> IO [Either Event Input]
toInput :: Pretty ColorText -> Either Event Input
determineFirstStep :: DownloadBase -> Codebase IO v a -> IO Onboarding
asciiartUnison :: Pretty ColorText
downloading :: Path -> Pretty ColorText
header :: Text -> Pretty ColorText
authorSuggestion :: Pretty ColorText
getStarted :: FilePath -> IO (Pretty ColorText)

module Unison.Share.Types
data CodeserverURI
CodeserverURI :: String -> URIAuth -> String -> CodeserverURI
[codeserverScheme] :: CodeserverURI -> String
[codeserverAuthority] :: CodeserverURI -> URIAuth
[codeserverPath] :: CodeserverURI -> String

-- | This is distinct from the codeserver URI in that we store credentials
--   by a normalized ID, since it's much easier to look up that way than
--   from an arbitrary path. We may wish to use explicitly named
--   configurations in the future. This currently uses a stringified
--   uriAuthority.
newtype CodeserverId
CodeserverId :: Text -> CodeserverId
[codeserverId] :: CodeserverId -> Text
codeserverFromURI :: URI -> Maybe CodeserverURI

-- | Gets the part of the CodeserverURI that we use for identifying that
--   codeserver in credentials files.
--   
--   <pre>
--   &gt;&gt;&gt; import Data.Maybe (fromJust)
--   
--   &gt;&gt;&gt; import Network.URI (parseURI)
--   
--   &gt;&gt;&gt; codeserverIdFromURI (CodeserverURI . fromJust $ parseURI "http://localhost:5424/api")
--   
--   &gt;&gt;&gt; codeserverIdFromURI (CodeserverURI . fromJust $ parseURI "https://share.unison-lang.org/api")
--   Right "localhost"
--   Right "share.unison-lang.org"
--   </pre>
codeserverIdFromURI :: URI -> Either Text CodeserverId
codeserverToURI :: CodeserverURI -> URI
codeserverIdFromCodeserverURI :: CodeserverURI -> CodeserverId
instance GHC.Classes.Ord Unison.Share.Types.CodeserverURI
instance GHC.Classes.Eq Unison.Share.Types.CodeserverURI
instance GHC.Show.Show Unison.Share.Types.CodeserverURI
instance Data.Aeson.Types.FromJSON.FromJSONKey Unison.Share.Types.CodeserverId
instance Data.Aeson.Types.ToJSON.ToJSONKey Unison.Share.Types.CodeserverId
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Share.Types.CodeserverId
instance Data.Aeson.Types.ToJSON.ToJSON Unison.Share.Types.CodeserverId
instance GHC.Classes.Ord Unison.Share.Types.CodeserverId
instance GHC.Classes.Eq Unison.Share.Types.CodeserverId
instance GHC.Show.Show Unison.Share.Types.CodeserverId

module Unison.Auth.Types
data DiscoveryDoc
DiscoveryDoc :: URI -> URI -> URI -> URI -> DiscoveryDoc
[issuer] :: DiscoveryDoc -> URI
[authorizationEndpoint] :: DiscoveryDoc -> URI
[tokenEndpoint] :: DiscoveryDoc -> URI
[userInfoEndpoint] :: DiscoveryDoc -> URI
data Tokens
Tokens :: AccessToken -> Maybe IDToken -> Maybe RefreshToken -> TokenType -> NominalDiffTime -> Scopes -> Tokens
[accessToken] :: Tokens -> AccessToken
[idToken] :: Tokens -> Maybe IDToken
[refreshToken] :: Tokens -> Maybe RefreshToken
[tokenType] :: Tokens -> TokenType
[expiresIn] :: Tokens -> NominalDiffTime
[scopes] :: Tokens -> Scopes
data Credentials
Credentials :: Map ProfileName (Map CodeserverId Tokens) -> ProfileName -> Credentials
[credentials] :: Credentials -> Map ProfileName (Map CodeserverId Tokens)
[activeProfile] :: Credentials -> ProfileName
type Code = Text
type AccessToken = Text
type RefreshToken = Text
type IDToken = Text
type OAuthState = ByteString
type PKCEVerifier = ByteString
type PKCEChallenge = ByteString
type ProfileName = Text
data CredentialFailure
ReauthRequired :: CodeserverId -> CredentialFailure
CredentialParseFailure :: FilePath -> Text -> CredentialFailure
InvalidDiscoveryDocument :: URI -> Text -> CredentialFailure
InvalidJWT :: Text -> CredentialFailure
RefreshFailure :: Text -> CredentialFailure
InvalidTokenResponse :: URI -> Text -> CredentialFailure
InvalidHost :: CodeserverURI -> CredentialFailure
getActiveTokens :: CodeserverId -> Credentials -> Either CredentialFailure Tokens
setActiveTokens :: CodeserverId -> Tokens -> Credentials -> Credentials
emptyCredentials :: Credentials
instance GHC.Exception.Type.Exception Unison.Auth.Types.CredentialFailure
instance GHC.Classes.Eq Unison.Auth.Types.CredentialFailure
instance GHC.Show.Show Unison.Auth.Types.CredentialFailure
instance GHC.Classes.Ord Unison.Auth.Types.Scopes
instance GHC.Classes.Eq Unison.Auth.Types.Scopes
instance GHC.Show.Show Unison.Auth.Types.Scopes
instance GHC.Show.Show Unison.Auth.Types.DiscoveryDoc
instance GHC.Show.Show Unison.Auth.Types.Tokens
instance GHC.Classes.Eq Unison.Auth.Types.Tokens
instance GHC.Classes.Eq Unison.Auth.Types.Credentials
instance Data.Aeson.Types.ToJSON.ToJSON Unison.Auth.Types.Credentials
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Auth.Types.Credentials
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Auth.Types.URIParam
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Auth.Types.DiscoveryDoc
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Auth.Types.Tokens
instance Data.Aeson.Types.ToJSON.ToJSON Unison.Auth.Types.Tokens
instance Data.Aeson.Types.ToJSON.ToJSON Unison.Auth.Types.Scopes
instance Data.Aeson.Types.FromJSON.FromJSON Unison.Auth.Types.Scopes

module Unison.Codebase.Editor.Output
data Output v
Success :: Output v
NoUnisonFile :: Output v
PrintMessage :: Pretty ColorText -> Output v
InvalidSourceName :: String -> Output v
SourceLoadFailed :: String -> Output v
NoMainFunction :: String -> PrettyPrintEnv -> [Type v Ann] -> Output v
BadMainFunction :: String -> Type v Ann -> PrettyPrintEnv -> [Type v Ann] -> Output v
BranchEmpty :: Either ShortBranchHash Path' -> Output v
BranchNotEmpty :: Path' -> Output v
LoadPullRequest :: ReadRemoteNamespace -> ReadRemoteNamespace -> Path' -> Path' -> Path' -> Path' -> Output v
CreatedNewBranch :: Absolute -> Output v
BranchAlreadyExists :: Path' -> Output v
PatchAlreadyExists :: Split' -> Output v
NoExactTypeMatches :: Output v
TypeAlreadyExists :: Split' -> Set Reference -> Output v
TypeParseError :: String -> Err v -> Output v
ParseResolutionFailures :: String -> [ResolutionFailure v Ann] -> Output v
TypeHasFreeVars :: Type v Ann -> Output v
TermAlreadyExists :: Split' -> Set Referent -> Output v
LabeledReferenceAmbiguous :: Int -> HashQualified Name -> Set LabeledDependency -> Output v
LabeledReferenceNotFound :: HashQualified Name -> Output v
DeleteNameAmbiguous :: Int -> HQSplit' -> Set Referent -> Set Reference -> Output v
TermAmbiguous :: HashQualified Name -> Set Referent -> Output v
HashAmbiguous :: ShortHash -> Set Referent -> Output v
BranchHashAmbiguous :: ShortBranchHash -> Set ShortBranchHash -> Output v
BadNamespace :: String -> String -> Output v
BranchNotFound :: Path' -> Output v
NameNotFound :: HQSplit' -> Output v
PatchNotFound :: Split' -> Output v
TypeNotFound :: HQSplit' -> Output v
TermNotFound :: HQSplit' -> Output v
TypeNotFound' :: ShortHash -> Output v
TermNotFound' :: ShortHash -> Output v
TypeTermMismatch :: HashQualified Name -> HashQualified Name -> Output v
SearchTermsNotFound :: [HashQualified Name] -> Output v
DeleteBranchConfirmation :: [(Path', (Names, [SearchResult' v Ann]))] -> Output v
DeleteEverythingConfirmation :: Output v
DeletedEverything :: Output v
ListNames :: IsGlobal -> Int -> [(Reference, Set (HashQualified Name))] -> [(Referent, Set (HashQualified Name))] -> Output v
ListOfDefinitions :: PrettyPrintEnv -> ListDetailed -> [SearchResult' v Ann] -> Output v
ListOfLinks :: PrettyPrintEnv -> [(HashQualified Name, Reference, Maybe (Type v Ann))] -> Output v
ListShallow :: PrettyPrintEnv -> [ShallowListEntry v Ann] -> Output v
ListOfPatches :: Set Name -> Output v
SlurpOutput :: Input -> PrettyPrintEnv -> SlurpResult v -> Output v
ParseErrors :: Text -> [Err v] -> Output v
TypeErrors :: Text -> PrettyPrintEnv -> [ErrorNote v Ann] -> Output v
CompilerBugs :: Text -> PrettyPrintEnv -> [CompilerBug v Ann] -> Output v
DisplayConflicts :: Relation Name Referent -> Relation Name Reference -> Output v
EvaluationFailure :: Error -> Output v
Evaluated :: SourceFileContents -> PrettyPrintEnv -> [(v, Term v ())] -> Map v (Ann, WatchKind, Term v (), IsCacheHit) -> Output v
Typechecked :: SourceName -> PrettyPrintEnv -> SlurpResult v -> TypecheckedUnisonFile v Ann -> Output v
DisplayRendered :: Maybe FilePath -> Pretty ColorText -> Output v
DisplayDefinitions :: Maybe FilePath -> PrettyPrintEnvDecl -> Map Reference (DisplayObject () (Decl v Ann)) -> Map Reference (DisplayObject (Type v Ann) (Term v Ann)) -> Output v
TestIncrementalOutputStart :: PrettyPrintEnv -> (Int, Int) -> Reference -> Term v Ann -> Output v
TestIncrementalOutputEnd :: PrettyPrintEnv -> (Int, Int) -> Reference -> Term v Ann -> Output v
TestResults :: TestReportStats -> PrettyPrintEnv -> ShowSuccesses -> ShowFailures -> [(Reference, Text)] -> [(Reference, Text)] -> Output v
CantUndo :: UndoFailureReason -> Output v
BustedBuiltins :: Set Reference -> Set Reference -> Output v
GitError :: GitError -> Output v
ConfiguredMetadataParseError :: Path' -> String -> Pretty ColorText -> Output v
NoConfiguredGitUrl :: PushPull -> Path' -> Output v
ConfiguredGitUrlParseError :: PushPull -> Path' -> Text -> String -> Output v
MetadataMissingType :: PrettyPrintEnv -> Referent -> Output v
TermMissingType :: Reference -> Output v
MetadataAmbiguous :: HashQualified Name -> PrettyPrintEnv -> [Referent] -> Output v
NothingToPatch :: PatchPath -> Path' -> Output v
PatchNeedsToBeConflictFree :: Output v
PatchInvolvesExternalDependents :: PrettyPrintEnv -> Set Reference -> Output v
WarnIncomingRootBranch :: ShortBranchHash -> Set ShortBranchHash -> Output v
StartOfCurrentPathHistory :: Output v
ShowReflog :: [ReflogEntry] -> Output v
PullAlreadyUpToDate :: ReadRemoteNamespace -> Path' -> Output v
PullSuccessful :: ReadRemoteNamespace -> Path' -> Output v

-- | Indicates a trivial merge where the destination was empty and was just
--   replaced.
MergeOverEmpty :: Path' -> Output v
MergeAlreadyUpToDate :: Path' -> Path' -> Output v
PreviewMergeAlreadyUpToDate :: Path' -> Path' -> Output v

-- | No conflicts or edits remain for the current patch.
NoConflictsOrEdits :: Output v
NotImplemented :: Output v
NoBranchWithHash :: ShortBranchHash -> Output v
ListDependencies :: Int -> LabeledDependency -> [(Name, Reference)] -> Set Reference -> Output v

-- | List dependents of a type or term.
ListDependents :: Int -> LabeledDependency -> [(Reference, Maybe Name)] -> Output v

-- | List all direct dependencies which don't have any names in the current
--   branch
ListNamespaceDependencies :: PrettyPrintEnv -> Absolute -> Map LabeledDependency (Set Name) -> Output v
DumpNumberedArgs :: NumberedArgs -> Output v
DumpBitBooster :: CausalHash -> Map CausalHash [CausalHash] -> Output v
DumpUnisonFileHashes :: Int -> [(Name, Id)] -> [(Name, Id)] -> [(Name, Id)] -> Output v
BadName :: String -> Output v
DefaultMetadataNotification :: Output v
CouldntLoadBranch :: CausalHash -> Output v
HelpMessage :: InputPattern -> Output v
NamespaceEmpty :: NonEmpty AbsBranchId -> Output v
NoOp :: Output v
RefusedToPush :: PushBehavior -> Output v

-- | <tt>GistCreated repo hash</tt> means causal <tt>hash</tt> was just
--   published to <tt>repo</tt>.
GistCreated :: Int -> WriteRepo -> CausalHash -> Output v

-- | Directs the user to URI to begin an authorization flow.
InitiateAuthFlow :: URI -> Output v
UnknownCodeServer :: Text -> Output v
CredentialFailureMsg :: CredentialFailure -> Output v
PrintVersion :: Text -> Output v
IntegrityCheck :: IntegrityResult -> Output v
data NumberedOutput v
ShowDiffNamespace :: AbsBranchId -> AbsBranchId -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterUndo :: PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterDeleteDefinitions :: PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterDeleteBranch :: Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterModifyBranch :: Path' -> Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterMerge :: Path' -> Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterMergePropagate :: Path' -> Absolute -> Path' -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterMergePreview :: Path' -> Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterPull :: Path' -> Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterCreatePR :: ReadRemoteNamespace -> ReadRemoteNamespace -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v
ShowDiffAfterCreateAuthor :: NameSegment -> Path' -> Absolute -> PrettyPrintEnv -> BranchDiffOutput v Ann -> NumberedOutput v

-- | Invariant: there's at least one conflict or edit in the TodoOutput.
TodoOutput :: PrettyPrintEnvDecl -> TodoOutput v Ann -> NumberedOutput v

-- | CantDeleteDefinitions ppe couldntDelete becauseTheseStillReferenceThem
CantDeleteDefinitions :: PrettyPrintEnvDecl -> Map LabeledDependency (NESet LabeledDependency) -> NumberedOutput v

-- | CantDeleteNamespace ppe couldntDelete becauseTheseStillReferenceThem
CantDeleteNamespace :: PrettyPrintEnvDecl -> Map LabeledDependency (NESet LabeledDependency) -> NumberedOutput v

-- | DeletedDespiteDependents ppe deletedThings
--   thingsWhichNowHaveUnnamedReferences
DeletedDespiteDependents :: PrettyPrintEnvDecl -> Map LabeledDependency (NESet LabeledDependency) -> NumberedOutput v

-- | size limit, history , how the history ends
History :: Maybe Int -> HashLength -> [(CausalHash, Diff)] -> HistoryTail -> NumberedOutput v
ListEdits :: Patch -> PrettyPrintEnv -> NumberedOutput v
type NumberedArgs = [String]
type ListDetailed = Bool
data HistoryTail
EndOfLog :: CausalHash -> HistoryTail
MergeTail :: CausalHash -> [CausalHash] -> HistoryTail
PageEnd :: CausalHash -> Int -> HistoryTail
data TestReportStats
CachedTests :: TotalCount -> CachedCount -> TestReportStats
NewlyComputed :: TestReportStats
data UndoFailureReason
CantUndoPastStart :: UndoFailureReason
CantUndoPastMerge :: UndoFailureReason
data PushPull
Push :: PushPull
Pull :: PushPull
data ReflogEntry
ReflogEntry :: ShortBranchHash -> Text -> ReflogEntry
[hash] :: ReflogEntry -> ShortBranchHash
[reason] :: ReflogEntry -> Text
pushPull :: a -> a -> PushPull -> a
isFailure :: Ord v => Output v -> Bool
isNumberedFailure :: NumberedOutput v -> Bool
instance GHC.Show.Show Unison.Codebase.Editor.Output.PushPull
instance GHC.Classes.Ord Unison.Codebase.Editor.Output.PushPull
instance GHC.Classes.Eq Unison.Codebase.Editor.Output.PushPull
instance GHC.Show.Show Unison.Codebase.Editor.Output.ReflogEntry
instance GHC.Show.Show Unison.Codebase.Editor.Output.HistoryTail
instance GHC.Show.Show Unison.Codebase.Editor.Output.TestReportStats
instance GHC.Show.Show Unison.Codebase.Editor.Output.UndoFailureReason

module Unison.CommandLine.OutputMessages
type Pretty = Pretty ColorText
shortenDirectory :: FilePath -> IO FilePath
renderFileName :: FilePath -> IO Pretty
notifyNumbered :: Var v => NumberedOutput v -> (Pretty, NumberedArgs)
showListEdits :: Patch -> PrettyPrintEnv -> (Pretty ColorText, NumberedArgs)
prettyURI :: URI -> Pretty
prettyRemoteNamespace :: ReadRemoteNamespace -> Pretty
notifyUser :: forall v. Var v => FilePath -> Output v -> IO Pretty
prettyFilePath :: FilePath -> Pretty
prettyPath' :: Path' -> Pretty
prettyBranchId :: AbsBranchId -> Pretty
prettyRelative :: Relative -> Pretty
prettyAbsolute :: Absolute -> Pretty
prettySBH :: IsString s => ShortBranchHash -> Pretty s
prettyCausalHash :: IsString s => CausalHash -> Pretty s
formatMissingStuff :: (Show tm, Show typ) => [(HashQualified Name, tm)] -> [(HashQualified Name, typ)] -> Pretty
displayDefinitions' :: Var v => Ord a1 => PrettyPrintEnvDecl -> Map Reference (DisplayObject () (Decl v a1)) -> Map Reference (DisplayObject (Type v a1) (Term v a1)) -> Pretty
displayRendered :: Maybe FilePath -> Pretty -> IO Pretty
displayDefinitions :: Var v => Ord a1 => Maybe FilePath -> PrettyPrintEnvDecl -> Map Reference (DisplayObject () (Decl v a1)) -> Map Reference (DisplayObject (Type v a1) (Term v a1)) -> IO Pretty
displayTestResults :: Bool -> PrettyPrintEnv -> [(Reference, Text)] -> [(Reference, Text)] -> Pretty
unsafePrettyTermResultSig' :: Var v => PrettyPrintEnv -> TermResult' v a -> Pretty
unsafePrettyTermResultSigFull' :: Var v => PrettyPrintEnv -> TermResult' v a -> Pretty
prettyTypeResultHeader' :: Var v => TypeResult' v a -> Pretty
prettyTypeResultHeaderFull' :: Var v => TypeResult' v a -> Pretty
prettyDeclTriple :: Var v => (HashQualified Name, Reference, DisplayObject () (Decl v a)) -> Pretty
prettyDeclPair :: Var v => PrettyPrintEnv -> (Reference, DisplayObject () (Decl v a)) -> Pretty
renderNameConflicts :: PrettyPrintEnv -> Names -> Numbered Pretty
renderEditConflicts :: PrettyPrintEnv -> Patch -> Numbered Pretty
type Numbered = State (Int, Seq String)
addNumberedArg :: String -> Numbered Int
formatNum :: Int -> Pretty
runNumbered :: Numbered a -> (a, NumberedArgs)
todoOutput :: Var v => PrettyPrintEnvDecl -> TodoOutput v a -> (Pretty, NumberedArgs)
listOfDefinitions :: Var v => PrettyPrintEnv -> ListDetailed -> [SearchResult' v a] -> IO Pretty
listOfLinks :: Var v => PrettyPrintEnv -> [(HashQualified Name, Maybe (Type v a))] -> IO Pretty
data ShowNumbers
ShowNumbers :: ShowNumbers
HideNumbers :: ShowNumbers

-- | <tt>ppe</tt> is just for rendering type signatures `oldPath, newPath
--   :: Path.Absolute` are just for producing fully-qualified numbered args
showDiffNamespace :: forall v. Var v => ShowNumbers -> PrettyPrintEnv -> AbsBranchId -> AbsBranchId -> BranchDiffOutput v Ann -> (Pretty, NumberedArgs)
noResults :: Pretty
listOfDefinitions' :: Var v => PrettyPrintEnv -> ListDetailed -> [SearchResult' v a] -> Pretty
watchPrinter :: Var v => Text -> PrettyPrintEnv -> Ann -> WatchKind -> Term v () -> IsCacheHit -> Pretty
filestatusTip :: Pretty
prettyDiff :: Diff -> Pretty
prettyTermName :: PrettyPrintEnv -> Referent -> Pretty
prettyTypeName :: PrettyPrintEnv -> Reference -> Pretty
prettyReadRepo :: ReadRepo -> Pretty
prettyWriteRepo :: WriteRepo -> Pretty
isTestOk :: Term v Ann -> Bool

-- | Get the list of numbered args corresponding to an endangerment map,
--   which is used by a few outputs. See <a>endangeredDependentsTable</a>.
numberedArgsForEndangerments :: PrettyPrintEnvDecl -> Map LabeledDependency (NESet LabeledDependency) -> NumberedArgs

-- | Format and render all dependents which are endangered by references
--   going extinct.
endangeredDependentsTable :: PrettyPrintEnvDecl -> Map LabeledDependency (NESet LabeledDependency) -> Pretty ColorText

-- | Displays a full, non-truncated Branch.CausalHash to a string, e.g.
--   #abcdef
displayBranchHash :: CausalHash -> String

module Unison.CommandLine.DisplayValues
type Pretty = Pretty ColorText
displayTerm :: Monad m => PrettyPrintEnvDecl -> (Reference -> m (Maybe (Term Symbol ()))) -> (Referent -> m (Maybe (Type Symbol ()))) -> (Term Symbol () -> m (Maybe (Term Symbol ()))) -> (Reference -> m (Maybe (Decl Symbol ()))) -> Term Symbol () -> m Pretty
type ElideUnit = Bool
displayTerm' :: Monad m => ElideUnit -> PrettyPrintEnvDecl -> (Reference -> m (Maybe (Term Symbol ()))) -> (Referent -> m (Maybe (Type Symbol ()))) -> (Term Symbol () -> m (Maybe (Term Symbol ()))) -> (Reference -> m (Maybe (Decl Symbol ()))) -> Term Symbol () -> m Pretty
displayPretty :: forall m. Monad m => PrettyPrintEnvDecl -> (Reference -> m (Maybe (Term Symbol ()))) -> (Referent -> m (Maybe (Type Symbol ()))) -> (Term Symbol () -> m (Maybe (Term Symbol ()))) -> (Reference -> m (Maybe (Decl Symbol ()))) -> Term Symbol () -> m Pretty
displayDoc :: forall v m. (Var v, Monad m) => PrettyPrintEnvDecl -> (Reference -> m (Maybe (Term v ()))) -> (Referent -> m (Maybe (Type v ()))) -> (Term v () -> m (Maybe (Term v ()))) -> (Reference -> m (Maybe (Decl v ()))) -> Term v () -> m Pretty
termName :: PrettyPrintEnv -> Referent -> Pretty
typeName :: PrettyPrintEnv -> Reference -> Pretty

module Unison.Codebase.Editor.Command
data Command m i v a
[Eval] :: m a -> Command m i v a
[UI] :: Command m i v ()
[API] :: Command m i v ()
[DocsToHtml] :: Branch m -> Path -> FilePath -> Command m i v ()
[HQNameQuery] :: Maybe Path -> Branch m -> [HashQualified Name] -> Command m i v QueryResult
[LoadSearchResults] :: [SearchResult] -> Command m i v [SearchResult' v Ann]
[GetDefinitionsBySuffixes] :: Maybe Path -> Branch m -> IncludeCycles -> [HashQualified Name] -> Command m i v (DefinitionResults v)
[FindShallow] :: Absolute -> Command m i v [ShallowListEntry v Ann]
[ConfigLookup] :: Configured a => Text -> Command m i v (Maybe a)
[Input] :: Command m i v i
[Notify] :: Output v -> Command m i v ()
[NotifyNumbered] :: NumberedOutput v -> Command m i v NumberedArgs
[AddDefsToCodebase] :: TypecheckedUnisonFile v Ann -> Command m i v ()
[CodebaseHashLength] :: Command m i v Int
[TypeReferencesByShortHash] :: ShortHash -> Command m i v (Set Reference)
[TermReferencesByShortHash] :: ShortHash -> Command m i v (Set Reference)
[TermReferentsByShortHash] :: ShortHash -> Command m i v (Set Referent)
[BranchHashLength] :: Command m i v Int
[BranchHashesByPrefix] :: ShortBranchHash -> Command m i v (Set CausalHash)
[ParseType] :: NamesWithHistory -> LexedSource -> Command m i v (Either (Err v) (Type v Ann))
[LoadSource] :: SourceName -> Command m i v LoadSourceResult
[Typecheck] :: AmbientAbilities v -> NamesWithHistory -> SourceName -> LexedSource -> Command m i v (TypecheckingResult v)
[TypecheckFile] :: UnisonFile v Ann -> [Type v Ann] -> Command m i v (TypecheckingResult v)
[Evaluate] :: PrettyPrintEnv -> TypecheckedUnisonFile v Ann -> Command m i v (Either Error (EvalResult v))
[Evaluate1] :: PrettyPrintEnv -> UseCache -> Term v Ann -> Command m i v (Either Error (Term v Ann))
[PutWatch] :: WatchKind -> Id -> Term v Ann -> Command m i v ()
[LoadWatches] :: WatchKind -> Set Reference -> Command m i v [(Reference, Term v Ann)]
[LoadLocalRootBranch] :: Command m i v (Branch m)
[LoadLocalBranch] :: CausalHash -> Command m i v (Branch m)
[Merge] :: MergeMode -> Branch m -> Branch m -> Command m i v (Branch m)
[ViewRemoteBranch] :: ReadRemoteNamespace -> GitBranchBehavior -> (Branch m -> Free (Command m i v) r) -> Command m i v (Either GitError r)
[ImportRemoteBranch] :: ReadRemoteNamespace -> SyncMode -> Preprocessing m -> Command m i v (Either GitError (Branch m))
[SyncLocalRootBranch] :: Branch m -> Command m i v ()
[SyncRemoteBranch] :: WriteRepo -> PushGitBranchOpts -> (Branch m -> m (Either e (Branch m))) -> Command m i v (Either GitError (Either e (Branch m)))
[AppendToReflog] :: Text -> Branch m -> Branch m -> Command m i v ()
[LoadReflog] :: Command m i v [Entry CausalHash]
[LoadTerm] :: Id -> Command m i v (Maybe (Term v Ann))
[LoadTermComponentWithTypes] :: Hash -> Command m i v (Maybe [(Term v Ann, Type v Ann)])
[LoadType] :: Id -> Command m i v (Maybe (Decl v Ann))
[LoadDeclComponent] :: Hash -> Command m i v (Maybe [Decl v Ann])
[LoadTypeOfTerm] :: Reference -> Command m i v (Maybe (Type v Ann))
[PutTerm] :: Id -> Term v Ann -> Type v Ann -> Command m i v ()
[PutDecl] :: Id -> Decl v Ann -> Command m i v ()
[IsTerm] :: Reference -> Command m i v Bool
[IsType] :: Reference -> Command m i v Bool

-- | Get the immediate (not transitive) dependents of the given reference
--   This might include historical definitions not in any current path;
--   these should be filtered by the caller of this command if that's not
--   desired.
[GetDependents] :: Reference -> Command m i v (Set Reference)
[GetDependentsOfComponent] :: Hash -> Command m i v (Set Reference)
[GetTermsOfType] :: Type v Ann -> Command m i v (Set Referent)
[GetTermsMentioningType] :: Type v Ann -> Command m i v (Set Referent)
[Execute] :: PrettyPrintEnv -> TypecheckedUnisonFile v Ann -> [String] -> Command m i v (WatchResults v Ann)
[CreateAuthorInfo] :: Text -> Command m i v (AuthorInfo v Ann)
[RuntimeMain] :: Command m i v (Type v Ann)
[RuntimeTest] :: Command m i v (Type v Ann)
[ClearWatchCache] :: Command m i v ()
[AnalyzeCodebaseIntegrity] :: Command m i v IntegrityResult
[MakeStandalone] :: PrettyPrintEnv -> Reference -> String -> Command m i v (Maybe Error)

-- | Trigger an interactive fuzzy search over the provided options and
--   return all selected results.
[FuzzySelect] :: Options -> (a -> Text) -> [a] -> Command m i v (Maybe [a])

-- | This allows us to implement MonadUnliftIO for (Free (Command m i v)).
--   Ideally we will eventually remove the Command type entirely and won't
--   need this anymore.
[CmdUnliftIO] :: Command m i v (UnliftIO (Free (Command m i v)))
[UCMVersion] :: Command m i v UCMVersion
type AmbientAbilities v = [Type v Ann]
type LexedSource = (Text, [Token Lexeme])
type Source = Text
type SourceName = Text
type TypecheckingResult v = Result (Seq (Note v Ann)) (Either Names (TypecheckedUnisonFile v Ann))
data LoadSourceResult
InvalidSourceNameError :: LoadSourceResult
LoadError :: LoadSourceResult
LoadSuccess :: Text -> LoadSourceResult
type UseCache = Bool
type EvalResult v = ([(v, Term v ())], Map v (Ann, WatchKind, Id, Term v (), Term v (), IsCacheHit))
commandName :: Command m i v a -> String
lookupEvalResult :: Ord v => v -> EvalResult v -> Maybe (Term v ())
type UCMVersion = Text
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Unison.Util.Free.Free (Unison.Codebase.Editor.Command.Command m i v))
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Unlift.MonadUnliftIO (Unison.Util.Free.Free (Unison.Codebase.Editor.Command.Command m i v))

module Unison.Codebase.Editor.Propagate
computeFrontier :: forall m. Monad m => (Reference -> m (Set Reference)) -> Patch -> (Reference -> Bool) -> m (Relation Reference Reference)
propagateAndApply :: forall m i v. (Applicative m, Var v) => Names -> Patch -> Branch0 m -> F m i v (Branch0 m)
instance GHC.Show.Show v => GHC.Show.Show (Unison.Codebase.Editor.Propagate.Edits v)
instance Unison.ABT.Var v => GHC.Classes.Eq (Unison.Codebase.Editor.Propagate.Edits v)

module Unison.Codebase.Editor.HandleCommand
typecheck :: Monad m => [Type Symbol Ann] -> Codebase m Symbol Ann -> ParsingEnv -> SourceName -> LexedSource -> m (TypecheckingResult Symbol)
typecheck' :: Monad m => [Type Symbol Ann] -> Codebase m Symbol Ann -> UnisonFile Symbol Ann -> m (TypecheckingResult Symbol)
commandLine :: forall i a gen. DRG gen => Config -> IO i -> (Branch IO -> IO ()) -> Runtime Symbol -> (Output Symbol -> IO ()) -> (NumberedOutput Symbol -> IO NumberedArgs) -> (SourceName -> IO LoadSourceResult) -> Codebase IO Symbol Ann -> Maybe BaseUrl -> UCMVersion -> (Int -> IO gen) -> Free (Command IO i Symbol) a -> IO a

module Unison.Auth.CredentialFile

-- | Atomically update the credential storage file. Creates an empty file
--   automatically if one doesn't exist.
atomicallyModifyCredentialsFile :: MonadIO m => (Credentials -> Credentials) -> m Credentials

module Unison.Auth.Discovery
discoveryURI :: CodeserverURI -> URI
discoveryForCodeserver :: MonadIO m => Manager -> CodeserverURI -> m (Either CredentialFailure DiscoveryDoc)

module Unison.Auth.CredentialManager

-- | Saves credentials to the active profile.
saveTokens :: MonadUnliftIO m => CredentialManager -> CodeserverId -> Tokens -> m ()

-- | A <a>CredentialManager</a> knows how to load, save, and cache
--   credentials. It's thread-safe and safe for use across multiple UCM
--   clients. Note: Currently the in-memory cache is _not_ updated if a
--   different UCM updates the credentials file, however this shouldn't
--   pose any problems, since auth will still be refreshed if we encounter
--   any auth failures on requests.
data CredentialManager
newCredentialManager :: MonadIO m => m CredentialManager
getTokens :: MonadIO m => CredentialManager -> CodeserverId -> m (Either CredentialFailure Tokens)

module Unison.Codebase.Editor.HandleInput.LoopState
type F m i v = Free (Command m i v)
data Env
Env :: Manager -> CredentialManager -> Env
[authHTTPClient] :: Env -> Manager
[credentialManager] :: Env -> CredentialManager
newtype Action m i v a
Action :: MaybeT (ReaderT Env (StateT (LoopState m v) (F m i v))) a -> Action m i v a
[unAction] :: Action m i v a -> MaybeT (ReaderT Env (StateT (LoopState m v) (F m i v))) a
runAction :: Env -> LoopState m v -> Action m i v a -> F m i v (Maybe a, LoopState m v)
liftF :: F m i v a -> Action m i v a

-- | A typeclass representing monads which can evaluate <a>Command</a>s.
class Monad n => MonadCommand n m v i | n -> m v i
eval :: MonadCommand n m v i => Command m v i a -> n a
data LoopState m v
LoopState :: Branch m -> Branch m -> NonEmpty Absolute -> Maybe (FilePath, SkipNextUpdate) -> Maybe (TypecheckedUnisonFile v Ann) -> Maybe Input -> NumberedArgs -> LoopState m v
[_root] :: LoopState m v -> Branch m
[_lastSavedRoot] :: LoopState m v -> Branch m
[_currentPathStack] :: LoopState m v -> NonEmpty Absolute
[_latestFile] :: LoopState m v -> Maybe (FilePath, SkipNextUpdate)
[_latestTypecheckedFile] :: LoopState m v -> Maybe (TypecheckedUnisonFile v Ann)
[_lastInput] :: LoopState m v -> Maybe Input
[_numberedArgs] :: LoopState m v -> NumberedArgs
type Action' m v = Action m (Either Event Input) v
type SkipNextUpdate = Bool
type InputDescription = Text
root :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) (Branch m_a30en)
numberedArgs :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) NumberedArgs
latestTypecheckedFile :: forall m_a30en v_a30eo v_a30Wa. Lens (LoopState m_a30en v_a30eo) (LoopState m_a30en v_a30Wa) (Maybe (TypecheckedUnisonFile v_a30eo Ann)) (Maybe (TypecheckedUnisonFile v_a30Wa Ann))
latestFile :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) (Maybe (FilePath, SkipNextUpdate))
lastSavedRoot :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) (Branch m_a30en)
lastInput :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) (Maybe Input)
currentPathStack :: forall m_a30en v_a30eo. Lens' (LoopState m_a30en v_a30eo) (NonEmpty Absolute)
currentPath :: Getter (LoopState m v) Absolute
loopState0 :: Branch m -> Absolute -> LoopState m v
respond :: MonadCommand n m i v => Output v -> n ()
respondNumbered :: NumberedOutput v -> Action m i v ()
instance Control.Monad.Fail.MonadFail (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance Control.Monad.Reader.Class.MonadReader Unison.Codebase.Editor.HandleInput.LoopState.Env (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance Control.Monad.State.Class.MonadState (Unison.Codebase.Editor.HandleInput.LoopState.LoopState m v) (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance GHC.Base.Monad (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance GHC.Base.Alternative (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance GHC.Base.Applicative (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance GHC.Base.Functor (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v)
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Unison.Codebase.Editor.HandleInput.LoopState.Action m i v) m i v
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Unison.Util.Free.Free (Unison.Codebase.Editor.Command.Command m i v)) m i v
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand n m i v => Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Control.Monad.Trans.State.Lazy.StateT s n) m i v
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand n m i v => Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Control.Monad.Trans.Maybe.MaybeT n) m i v
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand n m i v => Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Control.Monad.Trans.Except.ExceptT e n) m i v
instance Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand n m i v => Unison.Codebase.Editor.HandleInput.LoopState.MonadCommand (Control.Monad.Trans.Reader.ReaderT r n) m i v

module Unison.Codebase.Editor.HandleInput.NamespaceDependencies

-- | Check the dependencies of all types, terms, and metadata in the
--   current namespace, returns a map of dependencies which do not have a
--   name within the current namespace, alongside the names of all of that
--   thing's dependents.
--   
--   This is non-transitive, i.e. only the first layer of external
--   dependencies is returned.
--   
--   So if my namespace depends on .base.Bag.map; which depends on
--   base.Map.mapKeys, only .base.Bag.map is returned unless some other
--   definition inside my namespace depends on base.Map.mapKeys directly.
--   
--   Returns a Set of names rather than using the PPE since we already have
--   the correct names in scope on this branch, and also want to list ALL
--   names of dependents, including aliases.
namespaceDependencies :: forall m i v. Ord v => Branch0 m -> Action m i v (Map LabeledDependency (Set Name))

module Unison.Auth.Tokens

-- | Checks whether a JWT access token is expired.
isExpired :: MonadIO m => AccessToken -> m Bool

-- | Given a <a>CodeserverId</a>, provide a valid <a>AccessToken</a> for
--   the associated host. The TokenProvider may automatically refresh
--   access tokens if we have a refresh token.
type TokenProvider = CodeserverId -> IO (Either CredentialFailure AccessToken)

-- | Creates a <a>TokenProvider</a> using the given
--   <a>CredentialManager</a>
newTokenProvider :: CredentialManager -> TokenProvider

-- | Don't yet support automatically refreshing tokens.
refreshTokens :: MonadIO m => CredentialManager -> CodeserverId -> Tokens -> m (Either CredentialFailure Tokens)

module Unison.Auth.OAuth

-- | Direct the user through an authentication flow with the given server
--   and store the credentials in the provided credential manager.
authenticateCodeserver :: forall m n i v. (MonadUnliftIO m, MonadCommand m n i v) => CredentialManager -> CodeserverURI -> m (Either CredentialFailure ())

module Unison.Codebase.Editor.HandleInput.AuthLogin
authLogin :: MonadUnliftIO m => Action m i v ()

module Unison.Codebase.Editor.HandleInput
loop :: forall m. MonadUnliftIO m => Action m (Either Event Input) Symbol ()
parseSearchType :: (Monad m, Var v) => SrcLoc -> String -> Action' m v (Either (Output v) (Type v Ann))

module Unison.Codebase.TranscriptParser
data Stanza
Ucm :: Hidden -> ExpectingError -> [UcmLine] -> Stanza
Unison :: Hidden -> ExpectingError -> Maybe ScratchFileName -> Text -> Stanza
API :: [APIRequest] -> Stanza
UnprocessedFence :: FenceType -> Text -> Stanza
Unfenced :: Text -> Stanza
type FenceType = Text
type ExpectingError = Bool
data Hidden
data TranscriptError
TranscriptRunFailure :: Text -> TranscriptError
TranscriptParseError :: Text -> TranscriptError
data UcmLine
UcmCommand :: Absolute -> Text -> UcmLine
UcmComment :: Text -> UcmLine
withTranscriptRunner :: forall m r. MonadUnliftIO m => UCMVersion -> Maybe FilePath -> (TranscriptRunner -> m r) -> m r
parse :: String -> Text -> Either TranscriptError [Stanza]
parseFile :: FilePath -> IO (Either TranscriptError [Stanza])
instance GHC.Show.Show Unison.Codebase.TranscriptParser.Hidden
instance GHC.Classes.Eq Unison.Codebase.TranscriptParser.Hidden
instance GHC.Exception.Type.Exception Unison.Codebase.TranscriptParser.TranscriptError
instance GHC.Show.Show Unison.Codebase.TranscriptParser.TranscriptError
instance GHC.Show.Show Unison.Codebase.TranscriptParser.Stanza
instance GHC.Show.Show Unison.Codebase.TranscriptParser.APIRequest
instance GHC.Show.Show Unison.Codebase.TranscriptParser.UcmLine

module Unison.Util.HTTP
addRequestMiddleware :: (Request -> IO Request) -> ManagerSettings -> ManagerSettings
setUserAgent :: Text -> ManagerSettings -> ManagerSettings
ucmUserAgent :: UCMVersion -> Text

module Unison.Auth.HTTPClient

-- | Returns a new http manager which applies the appropriate Authorization
--   header to any hosts our UCM is authenticated with.
newAuthorizedHTTPClient :: MonadIO m => CredentialManager -> UCMVersion -> m Manager

-- | Newtype to delineate HTTP Managers with access-token logic.
newtype AuthorizedHttpClient
AuthorizedHttpClient :: Manager -> AuthorizedHttpClient

module Unison.Sync.HTTP
getPathHandler :: AuthorizedHttpClient -> BaseUrl -> GetCausalHashByPathRequest -> IO GetCausalHashByPathResponse
updatePathHandler :: AuthorizedHttpClient -> BaseUrl -> UpdatePathRequest -> IO UpdatePathResponse
downloadEntitiesHandler :: AuthorizedHttpClient -> BaseUrl -> DownloadEntitiesRequest -> IO DownloadEntitiesResponse
uploadEntitiesHandler :: AuthorizedHttpClient -> BaseUrl -> UploadEntitiesRequest -> IO UploadEntitiesResponse
instance GHC.Exception.Type.Exception Unison.Sync.HTTP.SyncError
instance GHC.Show.Show Unison.Sync.HTTP.SyncError

module Unison.CommandLine.Main
main :: FilePath -> Welcome -> Absolute -> (Config, IO ()) -> [Either Event Input] -> Runtime Symbol -> Codebase IO Symbol Ann -> Maybe BaseUrl -> UCMVersion -> IO ()
