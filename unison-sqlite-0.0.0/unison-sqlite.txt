-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-sqlite
@version 0.0.0

module Unison.Sqlite.Connection

-- | A <i>non-thread safe</i> connection to a SQLite database.
data Connection
Connection :: String -> FilePath -> Connection -> Connection
[$sel:name:Connection] :: Connection -> String
[$sel:file:Connection] :: Connection -> FilePath
[$sel:conn:Connection] :: Connection -> Connection

-- | Perform an action with a connection to a SQLite database.
--   
--   Note: the connection is created with <tt>PRAGMA foreign_keys = ON</tt>
--   automatically, to work around the fact that SQLite does not
--   automatically enforce foreign key integrity, because it elected to
--   maintain backwards compatibility with code that was written before the
--   foreign key integrity feature was implemented.
withConnection :: MonadUnliftIO m => String -> FilePath -> (Connection -> m a) -> m a
execute :: ToRow a => Connection -> Sql -> a -> IO ()
executeMany :: ToRow a => Connection -> Sql -> [a] -> IO ()
execute_ :: Connection -> Sql -> IO ()
queryListRow :: (FromRow b, ToRow a) => Connection -> Sql -> a -> IO [b]
queryListCol :: forall a b. (FromField b, ToRow a) => Connection -> Sql -> a -> IO [b]
queryMaybeRow :: (ToRow a, FromRow b) => Connection -> Sql -> a -> IO (Maybe b)
queryMaybeCol :: forall a b. (ToRow a, FromField b) => Connection -> Sql -> a -> IO (Maybe b)
queryOneRow :: (FromRow b, ToRow a) => Connection -> Sql -> a -> IO b
queryOneCol :: forall a b. (FromField b, ToRow a) => Connection -> Sql -> a -> IO b
queryListRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> ([b] -> Either e r) -> IO r
queryListColCheck :: forall a b e r. (FromField b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> ([b] -> Either e r) -> IO r
queryMaybeRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> (Maybe b -> Either e r) -> IO r
queryMaybeColCheck :: forall a b e r. (FromField b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> (Maybe b -> Either e r) -> IO r
queryOneRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> (b -> Either e r) -> IO r
queryOneColCheck :: forall a b e r. (FromField b, ToRow a, SqliteExceptionReason e) => Connection -> Sql -> a -> (b -> Either e r) -> IO r
queryListRow_ :: FromRow a => Connection -> Sql -> IO [a]
queryListCol_ :: forall a. FromField a => Connection -> Sql -> IO [a]
queryMaybeRow_ :: FromRow a => Connection -> Sql -> IO (Maybe a)
queryMaybeCol_ :: forall a. FromField a => Connection -> Sql -> IO (Maybe a)
queryOneRow_ :: FromRow a => Connection -> Sql -> IO a
queryOneCol_ :: forall a. FromField a => Connection -> Sql -> IO a
queryListRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Connection -> Sql -> ([a] -> Either e r) -> IO r
queryListColCheck_ :: forall a e r. (FromField a, SqliteExceptionReason e) => Connection -> Sql -> ([a] -> Either e r) -> IO r
queryMaybeRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Connection -> Sql -> (Maybe a -> Either e r) -> IO r
queryMaybeColCheck_ :: forall a e r. (FromField a, SqliteExceptionReason e) => Connection -> Sql -> (Maybe a -> Either e r) -> IO r
queryOneRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Connection -> Sql -> (a -> Either e r) -> IO r
queryOneColCheck_ :: forall a e r. (FromField a, SqliteExceptionReason e) => Connection -> Sql -> (a -> Either e r) -> IO r

-- | Perform an action within a named savepoint. The action is provided a
--   rollback action.
withSavepoint :: Connection -> Text -> (IO () -> IO a) -> IO a
withStatement :: (FromRow a, ToRow b) => Connection -> Sql -> b -> (IO (Maybe a) -> IO c) -> IO c

-- | A query was expected to return exactly one row, but it did not. The
--   exception carries a string representation of the rows that were
--   actually returned.
newtype ExpectedAtMostOneRowException
ExpectedAtMostOneRowException :: String -> ExpectedAtMostOneRowException
[$sel:rows:ExpectedAtMostOneRowException] :: ExpectedAtMostOneRowException -> String

-- | A query was expected to return exactly one row, but it did not. The
--   exception carries a string representation of the rows that were
--   actually returned.
newtype ExpectedExactlyOneRowException
ExpectedExactlyOneRowException :: String -> ExpectedExactlyOneRowException
[$sel:rows:ExpectedExactlyOneRowException] :: ExpectedExactlyOneRowException -> String
instance Unison.Sqlite.Exception.SqliteExceptionReason Unison.Sqlite.Connection.ExpectedExactlyOneRowException
instance GHC.Show.Show Unison.Sqlite.Connection.ExpectedExactlyOneRowException
instance Unison.Sqlite.Exception.SqliteExceptionReason Unison.Sqlite.Connection.ExpectedAtMostOneRowException
instance GHC.Show.Show Unison.Sqlite.Connection.ExpectedAtMostOneRowException
instance GHC.Show.Show Unison.Sqlite.Connection.Connection

module Unison.Sqlite.Transaction
data Transaction a

-- | Run a transaction on the given connection.
runTransaction :: MonadIO m => Connection -> Transaction a -> m a
execute :: ToRow a => Sql -> a -> Transaction ()
executeMany :: ToRow a => Sql -> [a] -> Transaction ()
execute_ :: Sql -> Transaction ()
queryListRow :: (FromRow a, ToRow b) => Sql -> b -> Transaction [a]
queryListCol :: (FromField a, ToRow b) => Sql -> b -> Transaction [a]
queryMaybeRow :: (FromRow a, ToRow b) => Sql -> b -> Transaction (Maybe a)
queryMaybeCol :: (FromField a, ToRow b) => Sql -> b -> Transaction (Maybe a)
queryOneRow :: (FromRow b, ToRow a) => Sql -> a -> Transaction b
queryOneCol :: (FromField b, ToRow a) => Sql -> a -> Transaction b
queryListRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> Transaction r
queryListColCheck :: (FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> Transaction r
queryMaybeRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> Transaction r
queryMaybeColCheck :: (FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> Transaction r
queryOneRowCheck :: (FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> Transaction r
queryOneColCheck :: (FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> Transaction r
queryListRow_ :: FromRow a => Sql -> Transaction [a]
queryListCol_ :: FromField a => Sql -> Transaction [a]
queryMaybeRow_ :: FromRow a => Sql -> Transaction (Maybe a)
queryMaybeCol_ :: FromField a => Sql -> Transaction (Maybe a)
queryOneRow_ :: FromRow a => Sql -> Transaction a
queryOneCol_ :: FromField a => Sql -> Transaction a
queryListRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> Transaction r
queryListColCheck_ :: (FromField a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> Transaction r
queryMaybeRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> Transaction r
queryMaybeColCheck_ :: (FromField a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> Transaction r
queryOneRowCheck_ :: (FromRow a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> Transaction r
queryOneColCheck_ :: (FromField a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> Transaction r
instance GHC.Base.Monad Unison.Sqlite.Transaction.Transaction
instance GHC.Base.Functor Unison.Sqlite.Transaction.Transaction
instance GHC.Base.Applicative Unison.Sqlite.Transaction.Transaction


-- | A type class interface to SQLite.
module Unison.Sqlite.DB
type DB m = (MonadIO m, MonadReader Connection m)
runDB :: MonadIO m => Connection -> ReaderT Connection m a -> m a
runTransaction :: DB m => Transaction a -> m a
execute :: (DB m, ToRow a) => Sql -> a -> m ()
executeMany :: (DB m, ToRow a) => Sql -> [a] -> m ()
execute_ :: DB m => Sql -> m ()
queryListRow :: (DB m, FromRow a, ToRow b) => Sql -> b -> m [a]
queryListCol :: (DB m, FromField a, ToRow b) => Sql -> b -> m [a]
queryMaybeRow :: (DB m, FromRow a, ToRow b) => Sql -> b -> m (Maybe a)
queryMaybeCol :: (DB m, FromField a, ToRow b) => Sql -> b -> m (Maybe a)
queryOneRow :: (DB m, FromRow b, ToRow a) => Sql -> a -> m b
queryOneCol :: (DB m, FromField b, ToRow a) => Sql -> a -> m b
queryListRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> m r
queryListColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> m r
queryMaybeRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> m r
queryMaybeColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> m r
queryOneRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> m r
queryOneColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> m r
queryListRow_ :: (DB m, FromRow a) => Sql -> m [a]
queryListCol_ :: (DB m, FromField a) => Sql -> m [a]
queryMaybeRow_ :: (DB m, FromRow a) => Sql -> m (Maybe a)
queryMaybeCol_ :: (DB m, FromField a) => Sql -> m (Maybe a)
queryOneRow_ :: (DB m, FromRow a) => Sql -> m a
queryOneCol_ :: (DB m, FromField a) => Sql -> m a
queryListRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> m r
queryListColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> m r
queryMaybeRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> m r
queryMaybeColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> m r
queryOneRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> m r
queryOneColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> m r

-- | Perform an action within a named savepoint. The action is provided a
--   rollback action.
withSavepoint :: (DB m, MonadUnliftIO m) => Text -> (m () -> m a) -> m a
withStatement :: (DB m, MonadUnliftIO m, FromRow a, ToRow b) => Sql -> b -> (m (Maybe a) -> m c) -> m c


-- | The Unison monorepo interface to SQLite.
--   
--   This module provides a high(-er) level interface to SQLite than the
--   <tt>sqlite-simple</tt> library, which it wraps. Code that interacts
--   with SQLite in this monorepo should use this interface, rather than
--   <tt>sqlite-simple</tt> or <tt>direct-sqlite</tt> directly.
--   
--   Three variants of the main query interface are provided:
--   
--   <ul>
--   <li><a>Unison.Sqlite.Connection</a> provides an interface in
--   <tt>IO</tt>, which takes the <a>Connection</a> argument as an explicit
--   argument.</li>
--   <li><a>Unison.Sqlite.DB</a> provides a type class interface, which
--   moves the <a>Connection</a> to an implicit argument. This interface is
--   also re-exported by this module, for convenient backwards
--   compatibility with the existing queries.</li>
--   <li><a>Unison.Sqlite.Transaction</a> provides a newer, yet-unused
--   interface that executes queries in transactions, with automatic
--   retries on <tt>SQLITE_BUSY</tt> due to concurrent writers.</li>
--   </ul>
module Unison.Sqlite

-- | A <i>non-thread safe</i> connection to a SQLite database.
data Connection

-- | Perform an action with a connection to a SQLite database.
--   
--   Note: the connection is created with <tt>PRAGMA foreign_keys = ON</tt>
--   automatically, to work around the fact that SQLite does not
--   automatically enforce foreign key integrity, because it elected to
--   maintain backwards compatibility with code that was written before the
--   foreign key integrity feature was implemented.
withConnection :: MonadUnliftIO m => String -> FilePath -> (Connection -> m a) -> m a
type DB m = (MonadIO m, MonadReader Connection m)
runDB :: MonadIO m => Connection -> ReaderT Connection m a -> m a

-- | A SQL snippet.
newtype Sql
Sql :: Text -> Sql
execute :: (DB m, ToRow a) => Sql -> a -> m ()
executeMany :: (DB m, ToRow a) => Sql -> [a] -> m ()
execute_ :: DB m => Sql -> m ()
queryListRow :: (DB m, FromRow a, ToRow b) => Sql -> b -> m [a]
queryListCol :: (DB m, FromField a, ToRow b) => Sql -> b -> m [a]
queryMaybeRow :: (DB m, FromRow a, ToRow b) => Sql -> b -> m (Maybe a)
queryMaybeCol :: (DB m, FromField a, ToRow b) => Sql -> b -> m (Maybe a)
queryOneRow :: (DB m, FromRow b, ToRow a) => Sql -> a -> m b
queryOneCol :: (DB m, FromField b, ToRow a) => Sql -> a -> m b
queryListRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> m r
queryListColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> ([b] -> Either e r) -> m r
queryMaybeRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> m r
queryMaybeColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (Maybe b -> Either e r) -> m r
queryOneRowCheck :: (DB m, FromRow b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> m r
queryOneColCheck :: (DB m, FromField b, ToRow a, SqliteExceptionReason e) => Sql -> a -> (b -> Either e r) -> m r
queryListRow_ :: (DB m, FromRow a) => Sql -> m [a]
queryListCol_ :: (DB m, FromField a) => Sql -> m [a]
queryMaybeRow_ :: (DB m, FromRow a) => Sql -> m (Maybe a)
queryMaybeCol_ :: (DB m, FromField a) => Sql -> m (Maybe a)
queryOneRow_ :: (DB m, FromRow a) => Sql -> m a
queryOneCol_ :: (DB m, FromField a) => Sql -> m a
queryListRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> m r
queryListColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> ([a] -> Either e r) -> m r
queryMaybeRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> m r
queryMaybeColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> (Maybe a -> Either e r) -> m r
queryOneRowCheck_ :: (DB m, FromRow a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> m r
queryOneColCheck_ :: (DB m, FromField a, SqliteExceptionReason e) => Sql -> (a -> Either e r) -> m r
newtype DataVersion
DataVersion :: Int64 -> DataVersion
getDataVersion :: Transaction DataVersion

-- | <a>https://www.sqlite.org/pragma.html#pragma_journal_mode</a>
data JournalMode
JournalMode'DELETE :: JournalMode
JournalMode'TRUNCATE :: JournalMode
JournalMode'PERSIST :: JournalMode
JournalMode'MEMORY :: JournalMode
JournalMode'WAL :: JournalMode
JournalMode'OFF :: JournalMode
trySetJournalMode :: JournalMode -> Transaction ()

-- | Perform an action within a named savepoint. The action is provided a
--   rollback action.
withSavepoint :: (DB m, MonadUnliftIO m) => Text -> (m () -> m a) -> m a
withStatement :: (DB m, MonadUnliftIO m, FromRow a, ToRow b) => Sql -> b -> (m (Maybe a) -> m c) -> m c

-- | The root exception for all exceptions thrown by this library.
--   
--   <pre>
--   SomeException (from base)
--     └── SomeSqliteException
--           └── SqliteConnectException
--           └── SqliteQueryException
--   </pre>
--   
--   A <tt>SomeSqliteException</tt> should not be inspected or used for
--   control flow when run in a trusted environment, where the database can
--   be assumed to be uncorrupt. Rather, wherever possible, the user of
--   this library should write code that is guaranteed not to throw
--   exceptions, by checking the necessary preconditions first. If that is
--   not possible, it should be considered a bug in this library.
--   
--   When actions are run on an untrusted codebase, e.g. one downloaded
--   from a remote server, it is sufficient to catch just one exception
--   type, <tt>SomeSqliteException</tt>.
data SomeSqliteException
SomeSqliteException :: e -> SomeSqliteException

-- | An exception thrown during establishing a connection.
data SqliteConnectException
SqliteConnectException :: ThreadId -> String -> FilePath -> SQLError -> SqliteConnectException
[$sel:threadId:SqliteConnectException] :: SqliteConnectException -> ThreadId
[$sel:name:SqliteConnectException] :: SqliteConnectException -> String
[$sel:file:SqliteConnectException] :: SqliteConnectException -> FilePath
[$sel:exception:SqliteConnectException] :: SqliteConnectException -> SQLError

-- | A <tt>SqliteQueryException</tt> represents an exception thrown during
--   processing a query, paired with some context that resulted in the
--   exception.
--   
--   A <tt>SqliteQueryException</tt> may result from a number of different
--   conditions:
--   
--   <ul>
--   <li>The underlying sqlite library threw an exception.</li>
--   <li>A postcondition violation of a function like <a>queryMaybeRow</a>,
--   which asserts that the resulting relation will have certain number of
--   rows,</li>
--   <li>A postcondition violation of a function like
--   <a>queryListRowCheck</a>, which takes a user-defined check as an
--   argument.</li>
--   </ul>
data SqliteQueryException
SqliteQueryException :: ThreadId -> String -> Sql -> String -> SomeSqliteExceptionReason -> SqliteQueryException
[$sel:threadId:SqliteQueryException] :: SqliteQueryException -> ThreadId
[$sel:connection:SqliteQueryException] :: SqliteQueryException -> String
[$sel:sql:SqliteQueryException] :: SqliteQueryException -> Sql
[$sel:params:SqliteQueryException] :: SqliteQueryException -> String

-- | The inner exception. It is intentionally not <a>SomeException</a>, so
--   that calling code cannot accidentally <a>throwIO</a> domain-specific
--   exception types, but must instead use a <tt>*Check</tt> query variant.
[$sel:exception:SqliteQueryException] :: SqliteQueryException -> SomeSqliteExceptionReason

-- | A type that is intended to be used as additional context for a
--   sqlite-related exception.
class (Show e, Typeable e) => SqliteExceptionReason e
data SomeSqliteExceptionReason
SomeSqliteExceptionReason :: e -> SomeSqliteExceptionReason

-- | A query was expected to return exactly one row, but it did not. The
--   exception carries a string representation of the rows that were
--   actually returned.
newtype ExpectedAtMostOneRowException
ExpectedAtMostOneRowException :: String -> ExpectedAtMostOneRowException
[$sel:rows:ExpectedAtMostOneRowException] :: ExpectedAtMostOneRowException -> String

-- | A query was expected to return exactly one row, but it did not. The
--   exception carries a string representation of the rows that were
--   actually returned.
newtype ExpectedExactlyOneRowException
ExpectedExactlyOneRowException :: String -> ExpectedExactlyOneRowException
[$sel:rows:ExpectedExactlyOneRowException] :: ExpectedExactlyOneRowException -> String
data SetJournalModeException
SetJournalModeException :: JournalMode -> JournalMode -> SetJournalModeException
[$sel:currentJournalMode:SetJournalModeException] :: SetJournalModeException -> JournalMode
[$sel:couldntSetTo:SetJournalModeException] :: SetJournalModeException -> JournalMode
